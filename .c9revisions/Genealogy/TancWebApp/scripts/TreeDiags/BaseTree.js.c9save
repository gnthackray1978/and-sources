{"ts":1354981926378,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"ï»¿\n\n\nArray.prototype.LinkContainingPoint = function (mx,my) {\n\n    for (var i = 0; i < this.length; i++) {\n\n        if ((this[i].x1 <= mx && this[i].x2 >= mx) \n        && (this[i].y1 <= my && this[i].y2 >= my))                      \n        {\n            return this[i];\n        }\n    }\n\n\n\n    return null;\n\n}\n\n\n\nfunction TreeBase() {\n\n    this.qryString = '';\n    this.refreshData =false;\n    this.screenHeight = 0.0;\n    this.screenWidth = 0.0;\n\n    this.buttonLinks = new Array();\n    this.links = new Array();\n\n    this.inLink = false;\n\n    this.generations = new Array();\n    this.familiesPerGeneration = new Array();\n    this.familySpanLines = new Array();\n    this.childlessMarriages = new Array();\n\n    this.centrePoint = 750.0;\n    this.centreVerticalPoint = 0.0;\n    this.zoomLevel = 0.0;\n    this.centrePointXOffset = 0.0;\n    this.centrePointYOffset = 0.0;\n\n    this.original_distanceBetweenBoxs = 0.0;\n    this.original_distanceBetweenGens = 0.0;\n    this.original_boxWidth = 0.0;\n    this.original_boxHeight = 0.0;\n    this.original_distancesbetfam = 0.0;\n    this.original_lowerStalkHeight = 0.0;\n\n    this.original_middleSpan = 40.0;\n    this.original_topSpan = 20.0;\n\n\n\n    this.zoomPercentage = 0.0;\n    this.distanceBetweenBoxs = 0.0;\n    this.distanceBetweenGens = 0.0;\n    this.halfBox = 0.0;\n    this.halfBoxHeight = 0.0;\n\n\n    this.mouse_x = 0; //int\n    this.mouse_y = 0; //int\n\n    this.initial_mouse_x = 0; //int\n    this.initial_mouse_y = 0; //int\n\n\n    this.xFromCentre = 0.0;\n    this.yFromCentre = 0.0;\n\n    this.drawingX1 = 0.0;\n    this.drawingX2 = 0.0;\n    this.drawingY1 = 0.0;\n    this.drawingY2 = 0.0;\n\n    this.drawingCentre = 0.0;\n    this.drawingWidth = 0.0;\n    this.drawingHeight = 0.0;\n\n    this.mouseXPercLocat = 0.0;\n    this.mouseYPercLocat = 0.0;\n\n    this.zoomAmount = 8; //int\n\n    this.boxWidth = 0.0;\n    this.boxHeight = 0.0;\n    this.sourceId = null;\n\n\n\n    this.SetInitialValues = function (zoomPerc,\n                                    dist_bet_box,\n                                    dist_bet_gen,\n                                    box_wid,\n                                    box_hig,\n                                    dist_bet_fam,\n                                    low_stalk_hi,\n                                    mid_span,\n                                    top_span,\n                                    screen_width,\n                                    screen_height\n                                    ) {\n\n\n        this.screenHeight = screen_height;\n        this.screenWidth = screen_width;\n\n        this.zoomPercentage = zoomPerc;\n        this.original_distanceBetweenBoxs = dist_bet_box;\n        this.original_distanceBetweenGens = dist_bet_gen;\n        this.original_boxWidth = box_wid;\n        this.original_boxHeight = box_hig;\n        this.original_distancesbetfam = dist_bet_fam;\n        this.original_lowerStalkHeight = low_stalk_hi;\n        this.original_middleSpan = mid_span;\n        this.original_topSpan = top_span;\n\n\n        this.distanceBetweenBoxs = this.original_distanceBetweenBoxs;\n        this.distanceBetweenGens = this.original_distanceBetweenGens;\n        this.boxWidth = this.original_boxWidth;\n        this.boxHeight = this.original_boxHeight;\n        this.distancesbetfam = this.original_distancesbetfam;\n        this.halfBox = this.boxWidth / 2;\n        this.halfBoxHeight = this.boxHeight / 2;\n\n        this.lowerSpan = this.original_lowerStalkHeight;\n\n        this.middleSpan = this.original_middleSpan;\n\n        this.topSpan = this.original_topSpan;\n\n    }\n\n    this.GetTreePerson = function (personId) {\n\n        var _genidx = 0;\n        var _personIdx = 0;\n\n        while (_genidx < this.generations.length) {\n            _personIdx = 0;\n\n            while (_personIdx < this.generations[_genidx].length) {\n\n                if (this.generations[_genidx][_personIdx].PersonId == personId) {\n                    return this.generations[_genidx][_personIdx];\n                }\n                _personIdx++;\n            }\n            _genidx++;\n        }\n\n        return null;\n    }\n\n\n    this.SetVisibility = function (parent, isDisplay) {\n\n\n        //            Stack<TreePerson> treePersonStack = new Stack<TreePerson>();\n        //            //get first set of children \n        //            foreach (TreePerson tp in generations[currentTP.GenerationIdx + 1].Where(o => currentTP.ChildLst.Contains(o.PersonId)))\n        //            {\n        //                treePersonStack.Push(tp);\n        //            }\n\n\n        var personStack = new Array();\n        var _genidx = 0;\n        var _personIdx = 0;\n        var isDisplayed = true;\n\n        if (this.generations.length > parent.GenerationIdx + 1) {\n            _genidx = 0;\n            while (_genidx < this.generations[parent.GenerationIdx + 1].length) {\n                // find all the children of the parent\n\n                if (this.generations[parent.GenerationIdx + 1][_genidx].FatherId == parent.PersonId ||\n                        this.generations[parent.GenerationIdx + 1][_genidx].MotherId == parent.PersonId) {\n\n                    personStack.push(this.generations[parent.GenerationIdx + 1][_genidx]);\n                }\n\n                _genidx++;\n            }\n        }\n\n        var currentTP = parent;\n        while (personStack.length > 0) {\n            currentTP = personStack.pop();\n            currentTP.IsDisplayed = isDisplay;\n\n            var spouseIdx = 0;\n            while (spouseIdx < currentTP.SpouseIdxLst.length) {\n                var spIdx = currentTP.SpouseIdxLst[spouseIdx];\n\n                this.generations[currentTP.GenerationIdx][spIdx].IsDisplayed = isDisplay;\n                spouseIdx++;\n            }\n\n\n\n                //                    foreach (TreePerson tp in generations[currentTP.GenerationIdx + 1].Where(o => currentTP.ChildLst.Contains(o.PersonId)))\n                //                    {\n                //                        treePersonStack.Push(tp);\n            //}\n\n            if (this.generations.length > currentTP.GenerationIdx + 1) {\n                _genidx = 0;\n                while (_genidx < this.generations[currentTP.GenerationIdx + 1].length) {\n                    // find all the children of the currently selected generation\n\n                    if (this.generations[currentTP.GenerationIdx + 1][_genidx].FatherId == currentTP.PersonId || this.generations[currentTP.GenerationIdx + 1][_genidx].MotherId == currentTP.PersonId) {\n                        personStack.push(this.generations[currentTP.GenerationIdx + 1][_genidx]);\n                    }\n\n                    _genidx++;\n                }\n\n\n            }\n        }\n\n\n    }\n\n    this.MoveTree = function (direction) {\n        // console.log('move tree' + direction);\n\n        if (direction == 'SOUTH') this.centreVerticalPoint -= 3;\n        if (direction == 'NORTH') this.centreVerticalPoint += 3;\n        if (direction == 'EAST') this.centrePoint += 3;\n        if (direction == 'WEST') this.centrePoint -= 3;\n\n\n        if (direction == 'UP' || direction == 'DOWN') {\n\n            var x = this.screenWidth / 2;\n            var y = this.screenHeight / 2;\n\n            this.SetMouse(x, y);\n\n\n            this.SetZoomStart();\n\n            this.SetCentrePoint(1000000, 1000000);\n\n\n            if (direction == 'UP') {\n                this.ZoomIn();\n            }\n            else {\n                this.ZoomOut();\n            }\n\n\n        }\n        else {\n            this.DrawTree();\n        }\n\n    }\n\n\n    this.SetZoom = function (percentage) {\n\n\n            if (percentage != 0.0) \n            {\n                var _workingtp = 0.0;\n                var _percLocal_x = 0.0;\n                var _percLocal_y = 0.0;\n\n                //zoom drawing components \n                this.zoomPercentage += percentage;\n                this.zoomLevel += percentage;\n                _workingtp = this.original_distanceBetweenBoxs / 100;\n                this.distanceBetweenBoxs = _workingtp * this.zoomPercentage;\n                _workingtp = this.original_boxWidth / 100;\n                this.boxWidth = _workingtp * this.zoomPercentage;\n                halfBox = this.boxWidth / 2;\n                _workingtp = this.original_distancesbetfam / 100;\n                _workingtp = this.original_distanceBetweenGens / 100;\n                this.distanceBetweenGens = _workingtp * this.zoomPercentage;\n                _workingtp = this.original_boxHeight / 100;\n                this.boxHeight = _workingtp * this.zoomPercentage;\n\n                this.halfBoxHeight = this.boxHeight / 2;\n\n                this.ComputeLocations();\n\n                this.GetPercDistances();\n                _percLocal_x = this.percX1;\n                _percLocal_y = this.percY1;\n\n\n                this.centreVerticalPoint += (this.drawingHeight / 100) * (_percLocal_y - this.mouseYPercLocat);\n\n                this.centrePoint += (this.drawingWidth / 100) * (_percLocal_x - this.mouseXPercLocat);\n\n                this.ComputeLocations();\n            } //end percentage ==0.0)\n\n\n\n            this.DrawTree();\n        \n    }\n\n\n    this.SetZoomStart = function () {\n        this.GetPercDistances();\n        this.mouseXPercLocat = this.percX1;\n        this.mouseYPercLocat = this.percY1;\n    }\n\n\n    this.GetPercDistances = function () {\n\n\n        var _distanceFromX1 = 0.0;\n        var _distanceFromY1 = 0.0;\n        var _onePercentDistance = 0.0;\n\n        this.percX1 = 0.0;\n        this.percY1 = 0.0;\n\n\n        this.drawingWidth = this.drawingX2 - this.drawingX1;\n        this.drawingHeight = this.drawingY2 - this.drawingY1;\n\n        if (this.drawingWidth != 0 && this.drawingHeight != 0) {\n            if (this.drawingX1 > 0) {\n                _distanceFromX1 = this.mouse_x - this.drawingX1; //;\n            }\n            else {\n                _distanceFromX1 = Math.abs(this.drawingX1) + this.mouse_x;\n            }\n\n            _onePercentDistance = this.drawingWidth / 100;\n            this.percX1 = _distanceFromX1 / _onePercentDistance;\n\n            if (this.drawingY1 > 0) {\n                _distanceFromY1 = this.mouse_y - this.drawingY1; // ;                \n            }\n            else {\n                _distanceFromY1 = Math.abs(this.drawingY1) + this.mouse_y;\n            }\n\n            _onePercentDistance = this.drawingHeight / 100;\n            this.percY1 = _distanceFromY1 / _onePercentDistance;\n\n        }\n\n    }\n\n    this.SetMouse = function (x, y) {\n        this.mouse_x = x;\n        this.mouse_y = y;\n\n        if (this.initial_mouse_x == 0) {\n            this.initial_mouse_x = this.mouse_x;\n        }\n\n        if (this.initial_mouse_y == 0) {\n            this.initial_mouse_y = this.mouse_y;\n        }\n\n        if (this.mouse_x < this.centrePoint) {\n            this.xFromCentre = this.centrePoint - this.mouse_x;\n        }\n        else {\n            if (this.centrePoint < 0) {\n                this.xFromCentre = this.mouse_x + Math.abs(this.centrePoint);\n            }\n            else {\n                this.xFromCentre = this.mouse_x - this.centrePoint;\n            }\n\n            this.xFromCentre = this.xFromCentre - (this.xFromCentre * 2);\n        }\n\n\n        var mouseLink = this.links.LinkContainingPoint(this.mouse_x, this.mouse_y);\n\n        var buttonLink = this.buttonLinks.LinkContainingPoint(this.mouse_x, this.mouse_y);\n\n        if (mouseLink != null || buttonLink != null) {\n            document.body.style.cursor = 'pointer';\n        }\n        else {\n            document.body.style.cursor = 'default';\n        }\n\n\n\n//        if (buttonLink != null) {\n//            document.body.style.cursor = 'pointer';\n//        }\n//        else {\n//            document.body.style.cursor = 'default';\n//        }\n\n        //        var _genidx = 0;\n        //        var _personIdx = 0;      \n        //        while (_genidx < this.generations.length) {\n        //            _personIdx = 0;\n        //            while (_personIdx < this.generations[_genidx].length) {\n        //                var _person = this.generations[_genidx][_personIdx];\n        //               \n        //                _personIdx++;\n        //            }\n        //            _genidx++;\n        //        }\n\n\n        //    console.log('set mouse: ' + this.initial_mouse_x + '-' + this.xFromCentre + '-' + this.centrePoint);\n\n    }\n\n\n    this.GetChildDisplayStatus = function (person) {\n\n        //cbox.IsChecked = treeMod.Generations[tp.GenerationIdx + 1].Where(o => o.PersonId == tp.ChildLst[0]).FirstOrDefault().IsDisplayed;\n\n        if (person.Name == 'John Blanchard') {\n            var test = '';\n        }\n\n        var _personIdx = 0;\n        var isDisplayed = true;\n\n        if (this.generations.length > person.GenerationIdx + 1) {\n            var _genidx = 0;\n            while (_genidx < this.generations[person.GenerationIdx + 1].length) {\n\n                if (this.generations[person.GenerationIdx + 1][_genidx].PersonId == person.ChildLst[0]) {\n                    var _person = this.generations[person.GenerationIdx + 1][_genidx];\n                    isDisplayed = _person.IsDisplayed;\n                    break;\n                }\n\n                _genidx++;\n            }\n        }\n\n        return isDisplayed;\n    }\n\n    this.PerformClick = function (x, y) {\n\n        var mouseLink = this.links.LinkContainingPoint(x, y);\n\n        if (mouseLink != null) {\n\n            \n\n            var selectedPerson = this.GetTreePerson(mouseLink.action);\n\n            var zoomReq = this.zoomPercentage ;//-100\n            var xpos = selectedPerson.X1;\n            var ypos = selectedPerson.Y1;\n\n\n            var queryStr = '?sid=' + '00000000-0000-0000-0000-000000000000' + '&id=' + selectedPerson.PersonId;\n            queryStr+= '&xpos=' + xpos + '&ypos=' + ypos + '&zoom=' + zoomReq;\n\n            this.qryString = queryStr;\n            \n           // var link = 'http://'+ window.location.host + '/HtmlPages/DescendantsTree.html#' + queryStr;\n\n            //window.location.href = link;\n            //alert(link);\n            this.refreshData =true;\n            \n        }\n        else\n        {\n\n\n        var buttonLink = this.buttonLinks.LinkContainingPoint(x, y);\n\n\n        if (buttonLink != null) {\n\n            var parts = buttonLink.action.split(',');\n\n            var clickedPerson = this.GetTreePerson(parts[0]);\n\n            var isVis = true;\n\n            if (parts[1] == 'false') {\n                isVis = true;\n            }\n            else {\n                isVis = false;\n            }\n\n\n            this.SetVisibility(clickedPerson, isVis);\n\n\n            //            if (clickedPerson.IsDisplayed) {\n            //                clickedPerson.IsDisplayed = false;\n            //            }\n            //            else {\n            //                clickedPerson.IsDisplayed = true;\n            //            }\n\n\n        }\n\n        }\n\n\n\n    }\n\n    this.SetCentrePoint = function (param_x, param_y) {\n\n        if (param_x == 1000000 && param_y == 1000000) {\n            this.centrePointXOffset = 0;\n            this.centrePointYOffset = 0;\n        }\n        else {\n\n            if (this.centrePointXOffset == 0) {\n\n                this.centrePointXOffset = this.centrePoint - param_x;\n            }\n            else {\n\n                this.centrePoint = param_x + this.centrePointXOffset;\n            }\n\n\n            if (this.centrePointYOffset == 0) {\n                this.centrePointYOffset = this.centreVerticalPoint - param_y;\n            }\n            else {\n\n                this.centreVerticalPoint = param_y + this.centrePointYOffset;\n            }\n\n        }\n\n        // console.log('setcentrepoint: '+ this.centrePointXOffset + ' ' + this.centrePoint);\n    } //end set centre point\n\n\n    this.ResetOffset = function () {\n\n        this.centrePointXOffset = 0;\n        this.centrePointYOffset = 0;\n    }\n\n\n    this.ZoomIn = function () {\n\n        this.zoomAmount++;\n\n        this.SetZoom(this.zoomAmount);\n    }\n\n    this.ZoomOut = function () {\n\n        if (this.zoomAmount > 7)\n            this.zoomAmount--;\n\n        this.SetZoom(this.zoomAmount - (this.zoomAmount * 2));\n        //  SetZoom(zoomAmount - (zoomAmount * 2));\n    }\n\n    this.CalcZoomLevel = function (zoomPercentage) {\n        var _retVal = 0;\n\n        if (zoomPercentage > 0 && zoomPercentage < 40) {\n            _retVal = 1;\n        }\n        else if (zoomPercentage >= 40 && zoomPercentage < 60) {\n            _retVal = 2;\n        }\n        else if (zoomPercentage >= 60 && zoomPercentage <= 150) {\n            _retVal = 3;\n        }\n        else if (zoomPercentage > 150 && zoomPercentage <= 200) {\n            _retVal = 4;\n        }\n        else if (zoomPercentage > 200 && zoomPercentage <= 250) {\n            _retVal = 5;\n        }\n        else if (zoomPercentage > 250 && zoomPercentage <= 300) {\n            _retVal = 6;\n        }\n        else if (zoomPercentage > 300) {\n            _retVal = 7;\n        }\n\n        return _retVal;\n    }\n\n    this.CalcAreaLevel = function (area) {\n        var _returnVal = 0;\n\n        if (area > 0 && area < 1000) {\n            _returnVal = 1;\n        }\n        else if (area >= 1000 && area < 2500) {\n            _returnVal = 2;\n        }\n        else if (area >= 2500 && area <= 5000) {\n            _returnVal = 3;\n        }\n        else if (area > 5000 && area <= 10000) {\n            _returnVal = 4;\n        }\n        else if (area > 10000 && area <= 15000) {\n            _returnVal = 5;\n        }\n        else if (area > 15000 && area <= 20000) {\n            _returnVal = 6;\n        }\n        else if (area > 20000) {\n            _returnVal = 7;\n        }\n\n        return _returnVal;\n    }\n\n    this.CalcTPZoom = function (genidx, personIdx) {\n        var _tp = this.generations[genidx][personIdx];\n\n        var _boxarea = (_tp.X2 - _tp.X1) * (_tp.Y2 - _tp.Y1);\n\n        _tp.zoom = this.CalcAreaLevel(_boxarea);\n    }\n\n\n\n\n\n\n    this.RelocatePerson = function (personId, _xpos, _ypos) {\n\n        this.ComputeLocations();\n\n        //  console.log('after 1st compute');\n\n\n\n        var _temp = this.GetTreePerson(personId);\n\n        var x = 0.0;\n        var y = 0.0;\n\n        if (_temp != null) {\n            if (_xpos == 0.0) {\n                var currentPersonLocation = (this.generations[0][0].X1 + this.generations[0][0].X2) / 2;\n                var requiredLocation = this.screenWidth / 2;\n                var distanceToMove = requiredLocation - currentPersonLocation;\n\n                this.centrePoint += distanceToMove;\n            }\n            else {\n                var currentPersonLocation = _temp.X1;\n\n\n                var distanceToMove = 0.0;\n\n                if (currentPersonLocation < 0.0) {\n                    distanceToMove = _xpos - currentPersonLocation;\n                }\n\n                if (currentPersonLocation > this.screenWidth) {\n                    distanceToMove = 0.0 - ((this.screenWidth - _xpos) + (_xpos - this.screenWidth));\n                }\n\n                if (currentPersonLocation >= 0 && currentPersonLocation <= this.screenWidth) {   //100 - 750\n                    distanceToMove = _xpos - currentPersonLocation;\n                    // 800 - 100\n                }\n\n                this.CentreXPoint += distanceToMove;\n            }\n\n            if (_ypos == 0.0) {\n                var _currentPersonLocation = (this.generations[0][0].Y1 + this.generations[0][0].Y2) / 2;\n                var _requiredLocation = this.boxHeight;\n                var _distanceToMove = _requiredLocation - _currentPersonLocation;\n                this.centreVerticalPoint -= _distanceToMove;\n            }\n            else {\n                var currentPersonLocation = 0.0;\n                var distanceToMove = 0.0;\n\n                if (_temp == null) {\n                    currentPersonLocation = 0.0;\n                }\n                else {\n                    currentPersonLocation = _temp.Y1;\n\n                    if (currentPersonLocation > this.screenHeight) {\n                        distanceToMove = currentPersonLocation - _ypos;\n                    }\n                    if (currentPersonLocation >= 0 && currentPersonLocation <= this.screenHeight) {\n                        distanceToMove = currentPersonLocation - _ypos;\n                    }\n                    if (currentPersonLocation < 0) {\n                        distanceToMove = _ypos - currentPersonLocation;\n                    }\n                }\n\n                this.centreVerticalPoint -= distanceToMove;\n            }\n\n            this.ComputeLocations();\n\n            if (_ypos == 0) {\n                y = 0 - this.screenHeight / 2;\n            }\n            else {\n                y = (_temp.Y2 + _temp.Y1) / 2;\n            }\n\n            if (_xpos == 0) {\n                x = this.screenWidth / 2;\n            }\n            else {\n                x = (_temp.X2 + _temp.X1) / 2;\n            }\n\n            this.SetMouse(x, y);\n            this.SetZoomStart();\n            this.SetCentrePoint(1000000, 1000000);\n\n\n            this.DrawTree();\n        }\n    }\n\n\n\n//    this.ComputeLocations = function () {\n\n//    }\n\n//    this.DrawTree = function () {\n\n//    }\n//}\n}"]],"start1":0,"start2":0,"length1":0,"length2":21092}]],"length":21092}
{"contributors":[],"silentsave":false,"ts":1354983961210,"patch":[[{"diffs":[[-1,"ï»¿"],[0,"\n\n\n"],[-1,"Array.prototype.LinkContainingPoint = function (mx,my) {\n\n    for (var i = 0; i < this.length; i++) {\n\n        if ((this[i].x1 <= mx && this[i].x2 >= mx) \n        && (this[i].y1 <= my && this[i].y2 >= my))                      \n        {\n            return this[i];\n        }\n    }\n\n\n\n    return null;\n\n}\n\n\n\n"],[1,"var TreeBase = "],[0,"func"]],"start1":0,"start2":0,"length1":316,"length2":22},{"diffs":[[0,"unction "],[-1,"TreeBase"],[0,"() {\n\n  "]],"start1":19,"start2":19,"length1":24,"length2":16},{"diffs":[[0,"ttonLinks = "],[-1,"new Array()"],[1,"[]"],[0,";\n    this.l"]],"start1":156,"start2":156,"length1":35,"length2":26},{"diffs":[[0,"his.links = "],[-1,"new Array()"],[1,"[]"],[0,";\n\n    this."]],"start1":177,"start2":177,"length1":35,"length2":26},{"diffs":[[0,"nerations = "],[-1,"new Array()"],[1,"[]"],[0,";\n    this.f"]],"start1":231,"start2":231,"length1":35,"length2":26},{"diffs":[[0,"ation = "],[-1,"new Array()"],[1,"[]"],[0,";\n    th"]],"start1":272,"start2":272,"length1":27,"length2":18},{"diffs":[[0,"Lines = "],[-1,"new Array()"],[1,"[]"],[0,";\n    th"]],"start1":303,"start2":303,"length1":27,"length2":18},{"diffs":[[0,"iages = "],[-1,"new Array()"],[1,"[]"],[0,";\n\n    t"]],"start1":337,"start2":337,"length1":27,"length2":18},{"diffs":[[0," null;\n\n"],[1,"}"],[0,"\n\n"],[-1,"    this."],[1,"TreeBase.prototype  = {\n        \n        "],[0,"SetIniti"]],"start1":1539,"start2":1539,"length1":27,"length2":60},{"diffs":[[0,"lValues "],[-1,"="],[1,":"],[0," functio"]],"start1":1600,"start2":1600,"length1":17,"length2":17},{"diffs":[[0,";\n\n    }"],[-1,"\n"],[1,","],[0,"\n    "],[-1,"this."],[0,"GetTreeP"]],"start1":3225,"start2":3225,"length1":27,"length2":22},{"diffs":[[0,"etTreePerson"],[-1," = "],[1,":"],[0,"function (pe"]],"start1":3240,"start2":3240,"length1":27,"length2":25},{"diffs":[[0,"l;\n    }"],[-1,"\n\n"],[1,","],[0,"\n    "],[-1,"this."],[0,"SetVisib"]],"start1":3742,"start2":3742,"length1":28,"length2":22},{"diffs":[[0,"sibility"],[-1," ="],[1,":"],[0," functio"]],"start1":3761,"start2":3761,"length1":18,"length2":17},{"diffs":[[0," {\n\n"],[-1,"\n        //            Stack<TreePerson> treePersonStack = new Stack<TreePerson>();\n        //            //get first set of children \n        //            foreach (TreePerson tp in generations[currentTP.GenerationIdx + 1].Where(o => currentTP.ChildLst.Contains(o.PersonId)))\n        //            {\n        //                treePersonStack.Push(tp);\n        //            }\n\n\n"],[0,"    "]],"start1":3799,"start2":3799,"length1":387,"length2":8},{"diffs":[[0,"k = "],[-1,"new Array()"],[1,"[]"],[0,";\n  "]],"start1":3825,"start2":3825,"length1":19,"length2":10},{"diffs":[[0," 0;\n"],[-1,"        var _personIdx = 0;\n        var isDisplayed = true;"],[0,"\n\n  "]],"start1":3854,"start2":3854,"length1":67,"length2":8},{"diffs":[[0," }\n\n"],[-1,"\n\n                //                    foreach (TreePerson tp in generations[currentTP.GenerationIdx + 1].Where(o => currentTP.ChildLst.Contains(o.PersonId)))\n                //                    {\n                //                        treePersonStack.Push(tp);\n            //}\n\n"],[0,"    "]],"start1":4915,"start2":4915,"length1":293,"length2":8},{"diffs":[[0,"              }\n"],[-1,"\n\n"],[0,"            }\n  "]],"start1":5549,"start2":5549,"length1":34,"length2":32},{"diffs":[[0,"   }"],[-1,"\n\n    this."],[1,",    \n    "],[0,"MoveTree"],[-1," ="],[1,":"],[0," fun"]],"start1":5592,"start2":5592,"length1":29,"length2":27},{"diffs":[[0,"   }"],[-1,"\n\n"],[1,","],[0,"\n    "],[-1,"this."],[0,"SetZoom"],[-1," ="],[1,":"],[0," fun"]],"start1":6413,"start2":6413,"length1":29,"length2":22},{"diffs":[[0,"ntage !="],[1,"="],[0," 0.0) \n "]],"start1":6479,"start2":6479,"length1":16,"length2":17},{"diffs":[[0,"  \n    }"],[-1,"\n\n"],[1,","],[0,"\n    "],[-1,"this."],[0,"SetZoomS"]],"start1":7991,"start2":7991,"length1":28,"length2":22},{"diffs":[[0,"oomStart"],[-1," = "],[1,":"],[0,"function"]],"start1":8009,"start2":8009,"length1":19,"length2":17},{"diffs":[[0,"1;\n    }"],[-1,"\n\n"],[1,","],[0,"\n    "],[-1,"this."],[0,"GetPercD"]],"start1":8150,"start2":8150,"length1":28,"length2":22},{"diffs":[[0,"istances"],[-1," = "],[1,":"],[0,"function"]],"start1":8172,"start2":8172,"length1":19,"length2":17},{"diffs":[[0,"Width !="],[1,"="],[0," 0 && th"]],"start1":8511,"start2":8511,"length1":16,"length2":17},{"diffs":[[0,"eight !="],[1,"="],[0," 0) {\n  "]],"start1":8539,"start2":8539,"length1":16,"length2":17},{"diffs":[[0,"   }"],[-1,"\n\n    this."],[1,",    \n    "],[0,"SetMouse"],[-1," = "],[1,":"],[0,"func"]],"start1":9294,"start2":9294,"length1":30,"length2":27},{"diffs":[[0,"use_x =="],[-1,""],[0,""],[1,"="],[0," 0) {\n  "]],"start1":9415,"start2":9415,"length1":16,"length2":17},{"diffs":[[0,"use_y =="],[-1,""],[0,""],[1,"="],[0," 0) {\n  "]],"start1":9517,"start2":9517,"length1":16,"length2":17},{"diffs":[[0," 2);\n        }\n\n"],[-1,"\n"],[0,"        var mous"]],"start1":10031,"start2":10031,"length1":33,"length2":32},{"diffs":[[0,"mouseLink !="],[1,"="],[0," null || but"]],"start1":10236,"start2":10236,"length1":24,"length2":25},{"diffs":[[0,"|| buttonLink !="],[1,"="],[0," null) {\n       "]],"start1":10255,"start2":10255,"length1":32,"length2":33},{"diffs":[[0," }\n\n"],[-1,"\n\n//        if (buttonLink != null) {\n//            document.body.style.cursor = 'pointer';\n//        }\n//        else {\n//            document.body.style.cursor = 'default';\n//        }\n\n        //        var _genidx = 0;\n        //        var _personIdx = 0;      \n        //        while (_genidx < this.generations.length) {\n        //            _personIdx = 0;\n        //            while (_personIdx < this.generations[_genidx].length) {\n        //                var _person = this.generations[_genidx][_personIdx];\n        //               \n        //                _personIdx++;\n        //            }\n        //            _genidx++;\n        //        }\n\n\n        //    console.log('set mouse: ' + this.initial_mouse_x + '-' + this.xFromCentre + '-' + this.centrePoint);\n\n    }\n\n\n    this."],[1,"    },\n    "],[0,"GetC"]],"start1":10417,"start2":10417,"length1":810,"length2":19},{"diffs":[[0,"ayStatus"],[-1," ="],[1,":"],[0," functio"]],"start1":10445,"start2":10445,"length1":18,"length2":17},{"diffs":[[0," {\n\n"],[-1,"        //cbox.IsChecked = treeMod.Generations[tp.GenerationIdx + 1].Where(o => o.PersonId == tp.ChildLst[0]).FirstOrDefault().IsDisplayed;\n\n        if (person.Name == 'John Blanchard') {\n            var test = '';\n        }\n\n        var _personIdx = 0;\n"],[0,"    "]],"start1":10472,"start2":10472,"length1":262,"length2":8},{"diffs":[[0,"d;\n    }"],[-1,"\n\n    this."],[1,",    \n    "],[0,"PerformC"]],"start1":11058,"start2":11058,"length1":27,"length2":26},{"diffs":[[0,"ormClick"],[-1," = "],[1,":"],[0,"function"]],"start1":11080,"start2":11080,"length1":19,"length2":17},{"diffs":[[0,"mouseLink !="],[1,"="],[0," null) {\n\n  "]],"start1":11183,"start2":11183,"length1":24,"length2":25},{"diffs":[[0,"null) {\n"],[-1,"\n  "],[0,"        "],[-1,"  \n"],[0,"\n       "]],"start1":11197,"start2":11197,"length1":30,"length2":24},{"diffs":[[0,"Person.Y1;\n\n"],[-1,"\n"],[0,"            "]],"start1":11413,"start2":11413,"length1":25,"length2":24},{"diffs":[[0,"oomReq;\n"],[-1,"\n"],[0,"        "]],"start1":11608,"start2":11608,"length1":17,"length2":16},{"diffs":[[0,"tr;\n"],[-1,"            \n           // var link = 'http://'+ window.location.host + '/HtmlPages/DescendantsTree.html#' + queryStr;\n\n            //window.location.href = link;\n            //alert(link);\n"],[0,"    "]],"start1":11651,"start2":11651,"length1":198,"length2":8},{"diffs":[[0,"hData =true;"],[-1,"\n"],[0,"            "]],"start1":11678,"start2":11678,"length1":25,"length2":24},{"diffs":[[0,"\n        {\n\n"],[-1,"\n"],[1,"    "],[0,"        var "]],"start1":11725,"start2":11725,"length1":25,"length2":28},{"diffs":[[0,"(x, y);\n"],[-1,"\n\n"],[1,"    \n    \n   "],[0,"        "],[1," "],[0,"if (butt"]],"start1":11802,"start2":11802,"length1":26,"length2":38},{"diffs":[[0,"nLink !="],[1,"="],[0," null) {"]],"start1":11841,"start2":11841,"length1":16,"length2":17},{"diffs":[[0,"!== null) {\n"],[-1,"\n"],[1,"    \n    "],[0,"            "]],"start1":11847,"start2":11847,"length1":25,"length2":33},{"diffs":[[0,"t(',');\n"],[-1,"\n"],[1,"    \n    "],[0,"        "]],"start1":11914,"start2":11914,"length1":17,"length2":25},{"diffs":[[0,"ts[0]);\n"],[-1,"\n"],[1,"    \n    "],[0,"        "]],"start1":11985,"start2":11985,"length1":17,"length2":25},{"diffs":[[0,"r isVis = true;\n"],[-1,"\n"],[1,"    \n    "],[0,"            if ("]],"start1":12016,"start2":12016,"length1":33,"length2":41},{"diffs":[[0,"                "],[1," "],[1,"   "],[0,"isVis = true;\n  "]],"start1":12080,"start2":12080,"length1":32,"length2":36},{"diffs":[[0,"ue;\n            "],[-1,"}\n"],[1,"    }\n  "],[0,"            else"]],"start1":12110,"start2":12110,"length1":34,"length2":40},{"diffs":[[0,"}\n              "],[1,"  "],[0,"else {\n"],[1,"    "],[0,"                "]],"start1":12130,"start2":12130,"length1":39,"length2":45},{"diffs":[[0,"se;\n            "],[1,"  "],[-1,"}\n\n\n"],[1,"  }\n    \n    "],[0,"            this"]],"start1":12186,"start2":12186,"length1":36,"length2":47},{"diffs":[[0,"s);\n"],[-1,"\n\n            //            if (clickedPerson.IsDisplayed) {\n            //                clickedPerson.IsDisplayed = false;\n            //            }\n            //            else {\n            //                clickedPerson.IsDisplayed = true;\n            //            }\n\n\n        }\n\n        }\n\n\n\n    }\n\n    this."],[1,"    \n            }\n\n        }\n\n\n\n    },\n    "],[0,"SetC"]],"start1":12267,"start2":12267,"length1":329,"length2":52},{"diffs":[[0,"trePoint"],[-1," ="],[1,":"],[0," functio"]],"start1":12321,"start2":12321,"length1":18,"length2":17},{"diffs":[[0,"ntXOffset =="],[-1,""],[0,""],[1,"="],[0," 0) {\n\n     "]],"start1":12556,"start2":12556,"length1":24,"length2":25},{"diffs":[[0,"ffset =="],[-1,""],[0,""],[1,"="],[0," 0) {\n  "]],"start1":12800,"start2":12800,"length1":16,"length2":17},{"diffs":[[0,"oint);\n    }"],[1,","],[0," //end set c"]],"start1":13118,"start2":13118,"length1":24,"length2":25},{"diffs":[[0,"e point\n"],[-1,"\n\n"],[0,"    "],[-1,"this."],[0,"ResetOff"]],"start1":13147,"start2":13147,"length1":27,"length2":20},{"diffs":[[0,"etOffset"],[-1," ="],[1,":"],[0," functio"]],"start1":13162,"start2":13162,"length1":18,"length2":17},{"diffs":[[0,"   }"],[-1,"\n\n"],[1,","],[0,"\n    "],[-1,"this."],[0,"ZoomIn"],[-1," = "],[1,":"],[0,"func"]],"start1":13262,"start2":13262,"length1":29,"length2":21},{"diffs":[[0,"n:function () {\n"],[-1,"\n"],[0,"        this.zoo"]],"start1":13277,"start2":13277,"length1":33,"length2":32},{"diffs":[[0,"ount++;\n"],[-1,"\n"],[0,"        "]],"start1":13312,"start2":13312,"length1":17,"length2":16},{"diffs":[[0,"   }"],[-1,"\n"],[1,","],[0,"\n    "],[-1,"this."],[0,"ZoomOut"],[-1," = "],[1,":"],[0,"func"]],"start1":13360,"start2":13360,"length1":29,"length2":22},{"diffs":[[0,"t:function () {\n"],[-1,"\n"],[0,"        if (this"]],"start1":13376,"start2":13376,"length1":33,"length2":32},{"diffs":[[0,"* 2));\n    }"],[-1,"\n"],[1,","],[0,"\n    "],[-1,"this."],[0,"CalcZoomLeve"]],"start1":13565,"start2":13565,"length1":35,"length2":30},{"diffs":[[0,"alcZoomLevel"],[-1," ="],[1,":"],[0," function (z"]],"start1":13584,"start2":13584,"length1":26,"length2":25},{"diffs":[[0,"etVal;\n    }"],[-1,"\n"],[1,","],[0,"\n    "],[-1,"this."],[0,"CalcAreaLeve"]],"start1":14341,"start2":14341,"length1":35,"length2":30},{"diffs":[[0,"reaLevel"],[-1," ="],[1,":"],[0," functio"]],"start1":14364,"start2":14364,"length1":18,"length2":17},{"diffs":[[0,"l;\n    }"],[-1,"\n"],[1,","],[0,"\n    "],[-1,"this."],[0,"CalcTPZo"]],"start1":15030,"start2":15030,"length1":27,"length2":22},{"diffs":[[0,"lcTPZoom"],[-1," ="],[1,":"],[0," functio"]],"start1":15046,"start2":15046,"length1":18,"length2":17},{"diffs":[[0,"   }"],[-1,"\n\n\n\n\n\n\n    this."],[1,",\n    "],[0,"Relo"]],"start1":15256,"start2":15256,"length1":24,"length2":14},{"diffs":[[0,"tePerson"],[-1," ="],[1,":"],[0," functio"]],"start1":15272,"start2":15272,"length1":18,"length2":17},{"diffs":[[0,");\n\n"],[1,"\n"],[0,"        "],[-1,"//  console.log('after 1st compute');\n\n\n"],[1,"var distanceToMove = 0.0;\n        var currentPersonLocation = 0;"],[0,"\n   "]],"start1":15349,"start2":15349,"length1":56,"length2":81},{"diffs":[[0,"_temp !="],[1,"="],[0," null) {"]],"start1":15533,"start2":15533,"length1":16,"length2":17},{"diffs":[[0,"if (_xpos =="],[1,"="],[0," 0.0) {\n    "]],"start1":15563,"start2":15563,"length1":24,"length2":25},{"diffs":[[0,"                "],[-1,"var "],[0,"currentPersonLoc"]],"start1":15584,"start2":15584,"length1":36,"length2":32},{"diffs":[[0,"                "],[-1,"var "],[0,"distanceToMove ="]],"start1":15746,"start2":15746,"length1":36,"length2":32},{"diffs":[[0,"                "],[-1,"var "],[0,"currentPersonLoc"]],"start1":15907,"start2":15907,"length1":36,"length2":32},{"diffs":[[0,"emp.X1;\n"],[-1,"\n\n"],[0,"        "]],"start1":15949,"start2":15949,"length1":18,"length2":16},{"diffs":[[0,"    "],[-1,"   var distanceToMove = 0.0;\n"],[0,"\n   "]],"start1":15966,"start2":15966,"length1":37,"length2":8},{"diffs":[[0,"_ypos =="],[-1,""],[0,""],[1,"="],[0," 0.0) {\n"]],"start1":16607,"start2":16607,"length1":16,"length2":17},{"diffs":[[0,"se {"],[-1,"\n                var currentPersonLocation = 0.0;\n                var distanceToMove = 0.0;"],[0,"\n\n  "]],"start1":16957,"start2":16957,"length1":99,"length2":8},{"diffs":[[0,"_temp =="],[1,"="],[0," null) {"]],"start1":16983,"start2":16983,"length1":16,"length2":17},{"diffs":[[0,"if (_ypos =="],[-1,""],[0,""],[1,"="],[0," 0) {\n      "]],"start1":17794,"start2":17794,"length1":24,"length2":25},{"diffs":[[0,"_xpos =="],[-1,""],[0,""],[1,"="],[0," 0) {\n  "]],"start1":17971,"start2":17971,"length1":16,"length2":17},{"diffs":[[0,"  }\n"],[1,"};"],[0,"\n\n"],[-1,"\n//    this.ComputeLocations = function () {\n\n//    }\n\n//    this.DrawTree = function () {\n\n//    }\n//}\n}"]],"start1":18283,"start2":18283,"length1":111,"length2":8}]],"length":18291,"saved":false}
{"ts":1354983983888,"patch":[[{"diffs":[[0,"null;\n\n}"],[1,";"],[0,"\n\nTreeBa"]],"start1":1540,"start2":1540,"length1":16,"length2":17}]],"length":18292,"saved":false}
{"contributors":[],"silentsave":false,"ts":1354997435033,"patch":[[{"diffs":[[0,"        "],[1,"this."],[0,"halfBox "]],"start1":7049,"start2":7049,"length1":16,"length2":21}]],"length":18297,"saved":false}
