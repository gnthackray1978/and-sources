{"ts":1355014812428,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"ï»¿\n\n\n\nfunction Tree() {\n    $.extend(this, new TreeBase());\n\n    this.distancesbetfam = 0.0;\n    this.lowerSpan = 0.0;\n    this.middleSpan = 0.0;\n    this.topSpan = 0.0;\n\n\n\n\n    this.startx1 = 0.0;\n    this.endx2 = 0.0;\n    this.familyCount = 0;\n    this.curGenPerCount = 0;\n    this.firstPX = 0.0;\n    this.secondPX = 0.0;\n    this.percX1 = 0.0;\n    this.percY1 = 0.0;\n\n    this.BaseSetZoom = this.SetZoom;\n\n    this.SetZoom = function (p_percentage) {\n\n        var workingtp = this.original_distanceBetweenBoxs / 100;\n      \n        this.distancesbetfam = workingtp * this.zoomPercentage;\n\n        workingtp = this.original_lowerStalkHeight / 100;\n\n        this.lowerSpan = workingtp * this.zoomPercentage;// (int)original_lowerStalkHeight;\n\n        workingtp = this.original_middleSpan / 100;\n\n        this.middleSpan = workingtp * this.zoomPercentage;//(int)original_middleSpan;\n\n        workingtp = this.original_topSpan / 100;\n\n        this.topSpan = workingtp * this.zoomPercentage;//(int)original_topSpan;\n\n\n        this.BaseSetZoom(Number(p_percentage));\n\n\n    }\n\n    this.DrawTree = function () {\n\n\n\n        var canvas = document.getElementById(\"myCanvas\");\n        var context = canvas.getContext(\"2d\");\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n\n\n        this.ComputeLocations();\n\n        var topLeftCornerX = 188;\n        var topLeftCornerY = 50;\n        var width = 200;\n        var height = 100;\n\n\n\n        var _genidx = 0;\n        var _personIdx = 0;\n        //this.generations.length\n\n        var treeUI = new TreeUI(this.screenWidth, this.screenHeight, this.boxWidth, this.boxHeight);\n\n        this.links = new Array();\n        this.buttonLinks = new Array();\n\n  //      $(\"#body\").remove(\".tree_Links\");\n\n                     //html('<span>Downloading Descendant Tree</span>');\n\n        while (_genidx < this.generations.length) {\n            _personIdx = 0;\n\n            while (_personIdx < this.generations[_genidx].length) {\n\n                var _person = this.generations[_genidx][_personIdx];\n\n                var personLink = treeUI.DrawPerson(_person, this.sourceId, this.zoomPercentage);\n\n                if(personLink != null)\n                    this.links.push(personLink);\n\n                var buttonLink = treeUI.DrawButton(_person, this.GetChildDisplayStatus(_person));\n\n                if(buttonLink != null)\n                    this.buttonLinks.push(buttonLink);\n                \n                \n                _personIdx++;\n            }\n            _genidx++;\n        }\n\n        var _fslOuter = 0;\n        var _fslInner = 0;\n        //   var _pointIdx = 0;\n\n\n        while (_fslOuter < this.familySpanLines.length) {\n            _fslInner = 0;\n            while (_fslInner < this.familySpanLines[_fslOuter].length) {\n                treeUI.DrawLine(this.familySpanLines[_fslOuter][_fslInner]);\n                _fslInner++;\n            } // end familySpanLines[_fslOuter].length\n\n            _fslOuter++;\n        } // end this.familySpanLines.length\n\n\n    }\n\n    this.ComputeLocations = function () {\n\n\n\n        if (this.generations.length == 0) {\n            return;\n        }\n\n        // unused\n        var _displayGenCount = 0;\n        var _genIdx = 0;\n\n        this.childlessMarriages = [];\n\n        this.drawingX2 = 0.0;\n\n\n\n        while (_genIdx < this.generations.length) {\n            var _innerIdx = 0;\n\n            while (_innerIdx < this.familySpanLines[_genIdx].length) {\n                this.familySpanLines[_genIdx][_innerIdx] = [];\n                _innerIdx++;\n            }\n\n            _genIdx++;\n        }\n\n        _genIdx = 0;\n\n        var lastPersonY2 = 0.0;\n\n\n        while (_genIdx < this.generations.length) {\n\n            if (this.IsGenerationDisplayed(_genIdx)) {\n                _displayGenCount++;\n\n                this.SetScheduleVars(_genIdx);\n\n                var _current_gen_upper_y = (_genIdx * this.boxHeight) + (_genIdx * this.distanceBetweenGens) + this.centreVerticalPoint;\n\n                var _increment_temp = 0.0;\n\n                var _famIdx = 0;\n\n                this.fillGenXs(_genIdx);\n\n\n\n\n                var familydirectionCounts = this.createFamilyCountArray(_genIdx);\n\n                var _familyIdx = -1;\n                var _personIdx = 0;\n\n                while (_personIdx < this.generations[_genIdx].length) {\n\n                    var genPerson = this.generations[_genIdx][_personIdx];\n\n\n                    if (genPerson.IsDisplayed) {\n                      //  console.log('displaying: ' + genPerson.Name);\n\n                        genPerson.X2 = genPerson.X1 + this.boxWidth;\n\n                        var _isDoubleSpouseEnd = false;\n                        var _isSpouse = genPerson.IsHtmlLink;\n\n                        if (_isSpouse) {\n\n                            if ((this.generations[_genIdx].length > _personIdx + 1) && this.generations[_genIdx][_personIdx + 1].IsHtmlLink) {\n                                _isDoubleSpouseEnd = true;\n                                //  console.log('double spouse: ' + _genIdx + ',' + _personIdx);\n                            }\n\n                        }\n\n                        var _parent_gen_lower_y = 0.0;\n                        if (genPerson.IsFamilyStart) {\n                            _familyIdx++;\n                            this.familySpanLines[_genIdx][_familyIdx] = new Array();\n                        }\n\n\n\n                        if (genPerson.SpouseIdxLst.length > 0 && genPerson.ChildCount == 0) {\n                            var spouseIdx = genPerson.SpouseIdxLst[0];\n                            var tp = this.generations[_genIdx][spouseIdx].X1;\n\n\n\n\n                            if (Math.abs(spouseIdx - _personIdx) <= 2) {\n                                if (this.generations[_genIdx][spouseIdx].ChildCount == 0) {\n\n                                    var myArray = new Array((genPerson.X1 + this.halfBox), (_current_gen_upper_y + this.boxHeight));\n                                    this.childlessMarriages[this.childlessMarriages.length] = myArray;\n\n                                    myArray = new Array((genPerson.X1 + this.halfBox), (_current_gen_upper_y + this.boxHeight + this.topSpan));\n                                    this.childlessMarriages[this.childlessMarriages.length] = myArray;\n\n                                    myArray = new Array((tp + this.halfBox), (_current_gen_upper_y + this.boxHeight + this.topSpan));\n                                    this.childlessMarriages[this.childlessMarriages.length] = myArray;\n\n                                    myArray = new Array((tp + this.halfBox), (_current_gen_upper_y + this.boxHeight));\n                                    this.childlessMarriages[this.childlessMarriages.length] = myArray;\n                                }\n                            }\n\n                        } //end genPerson.SpouseIdxLst.length > 0 && genPerson.ChildCount\n\n\n                        var _middleParents = 0.0;\n                        //   var firstPX = 0.0;\n                        //   var secondPX = 0.0;\n\n                        var _thirdStorkX = 0.0;\n\n                        if (_genIdx > 0)\n                            _parent_gen_lower_y = this.generations[_genIdx - 1][genPerson.FatherIdx].Y2;\n\n                        var _firstRow = _current_gen_upper_y - this.lowerSpan;\n                        var _secondRow = _parent_gen_lower_y + this.middleSpan; // changed with increment later on - need to calculate the maximum and minimum this increment will be\n                        var _thirdRow = _parent_gen_lower_y + this.middleSpan;\n                        var _fourthRow = _parent_gen_lower_y + this.topSpan;\n\n                        if ((!(genPerson.IsFamilyEnd && _isSpouse)) && _genIdx > 0) {\n                            if (!_isDoubleSpouseEnd) {\n                                var _family = this.familySpanLines[_genIdx][_familyIdx];\n\n                                //  console.log(genPerson.Name);\n\n                                _family.push(new Array((genPerson.X1 + this.halfBox), _firstRow));\n\n                                if (!_isSpouse)\n                                    _family.push(new Array((genPerson.X1 + this.halfBox), _current_gen_upper_y));\n\n                                _family.push(new Array((genPerson.X1 + this.halfBox), _firstRow));\n                            }\n                        }\n\n\n\n\n                        //regional parental links\n\n\n                        if (genPerson.IsParentalLink && _genIdx > 0) {\n                            _middleParents = this.MiddleParents(_genIdx, genPerson.FatherIdx, genPerson.MotherIdx);\n\n                            var _nextParentLink = this.GetFirst(_genIdx, genPerson.FatherIdx, genPerson.MotherIdx);\n                            var _prevParentLink = this.GetPrev(_genIdx, genPerson.FatherIdx, genPerson.MotherIdx);\n\n                            this.GetParentXs(_genIdx, genPerson.FatherIdx, genPerson.MotherIdx);\n\n                            var incSize = 0;\n\n                            incSize = this.distanceBetweenGens - this.middleSpan - this.lowerSpan;\n                            incSize = incSize / familydirectionCounts[_famIdx];\n\n\n                            if (_famIdx == 0) {\n                                if (genPerson.X1 > _middleParents)\n                                    _increment_temp = this.distanceBetweenGens - this.middleSpan - this.lowerSpan;\n                                else\n                                    _increment_temp = 0.0;\n                            }\n\n\n                            if (genPerson.X1 > _middleParents) {\n                                _increment_temp -= incSize; //original\n\n                                if (_nextParentLink > genPerson.X2)\n                                    _thirdStorkX = genPerson.X2;\n                                else\n                                    _thirdStorkX = _nextParentLink;\n\n                                if ((genPerson.X1 > _middleParents) && (_thirdStorkX > genPerson.X1)) {\n                                    _thirdStorkX = genPerson.X1;\n                                }\n                            }\n                            else {\n                                _increment_temp += incSize; //original\n\n                                if (_prevParentLink < genPerson.X1)\n                                    _thirdStorkX = genPerson.X1;\n                                else\n                                    _thirdStorkX = _prevParentLink;\n\n                                if ((genPerson.X1 < _middleParents) && (_thirdStorkX < genPerson.X1)) {\n                                    _thirdStorkX = genPerson.X1;\n                                }\n                            }\n\n\n                            _secondRow += _increment_temp;\n\n\n                            //tweak start of rows\n                            //(Math.abs(double1 - double2) <= precision)\n\n                            if (Math.abs(_firstRow - _secondRow) <= 1) {\n                                _secondRow -= (incSize / 2);\n                            }\n\n\n\n\n\n                            var _secondStorkX = genPerson.X1;\n\n                            if (genPerson.IsFamilyStart && genPerson.IsFamilyEnd) {\n                                // only child with no spouses!\n                                if (_personIdx == 0) {\n                                    var _nextFamilyStart = 0;\n\n\n                                    if (this.generations[_genIdx].Count > 1) {\n                                        _nextFamilyStart = this.generations[_genIdx][_personIdx + 1].X1;\n                                    }\n                                    else {\n                                        _nextFamilyStart = this.generations[_genIdx][_personIdx].X2;\n                                    }\n\n                                    if (_middleParents < _nextFamilyStart && _middleParents > this.generations[_genIdx][_personIdx].X1) {\n                                        _secondStorkX = _middleParents;\n                                        _thirdStorkX = _middleParents;\n                                    }\n\n                                }\n                            }\n                            else {\n                                // handles situations where lines are overlapping the next or prev\n                                // family\n                                // happens when there are just 1 or 2 families \n                                // and one of them is unusually large or something like that.\n\n                                if (genPerson.IsFamilyStart) {\n                                    // tidy up the link to the parents\n\n                                    var _sizeToAdd = this.halfBox;\n\n                                    if (!genPerson.IsFamilyEnd) {\n                                        _sizeToAdd = this.boxWidth;\n                                    }\n\n                                    if (_secondStorkX == _thirdStorkX) {\n                                        _thirdStorkX += _sizeToAdd;\n                                    }\n\n\n                                    _secondStorkX += _sizeToAdd;\n\n\n                                }\n\n                            }\n\n                            //endregion\n                            var _family0 = this.familySpanLines[_genIdx][_familyIdx];\n\n                            //_family0.push();\n                            _family0.push(new Array(_secondStorkX, _firstRow));\n                            _family0.push(new Array(_secondStorkX, _secondRow));\n                            _family0.push(new Array(_thirdStorkX, _secondRow));\n                            _family0.push(new Array(_thirdStorkX, _thirdRow));\n                            _family0.push(new Array(_middleParents, _thirdRow));\n                            _family0.push(new Array(_middleParents, _fourthRow));\n                            _family0.push(new Array(this.firstPX, _fourthRow));\n                            _family0.push(new Array(this.firstPX, _parent_gen_lower_y));\n                            _family0.push(new Array(this.firstPX, _fourthRow));\n\n                            _family0.push(new Array(this.secondPX, _fourthRow));\n                            _family0.push(new Array(this.secondPX, _parent_gen_lower_y));\n                            _family0.push(new Array(this.secondPX, _fourthRow));\n                            _family0.push(new Array(_middleParents, _fourthRow));\n                            _family0.push(new Array(_middleParents, _thirdRow));\n\n                            _family0.push(new Array(_thirdStorkX, _thirdRow));\n                            _family0.push(new Array(_thirdStorkX, _secondRow));\n\n                            _family0.push(new Array(_secondStorkX, _secondRow));\n                            _family0.push(new Array(_secondStorkX, _firstRow));\n\n                            _famIdx++;\n                        } //end (genPerson.IsParentalLink && _genIdx > 0)\n\n\n                        genPerson.Y1 = _current_gen_upper_y;\n                        genPerson.Y2 = _current_gen_upper_y + this.boxHeight;\n\n                        lastPersonY2 = genPerson.Y2;\n\n                        this.CalcTPZoom(_genIdx, _personIdx);\n\n                    } // end (genPerson.IsDisplayed)\n\n\n                    _personIdx++;\n                } //end while\n\n            }\n\n\n            _genIdx++;\n        }\n\n        if (this.generations.length > 0) {\n            this.drawingY1 = this.generations[0][0].Y1;\n        }\n\n        if (this.generations[_displayGenCount - 1].length > 0) {\n            //    TreePerson heightPerson = generations[_displayGenCount - 1].Where(o => o.IsDisplayed && o.IsParentalLink).FirstOrDefault();\n\n            //  if(heightPerson != null)\n            this.drawingY2 = lastPersonY2;\n        }\n        //drawingCentreVertical = drawingY2 - drawingY1;\n        this.drawingCentre = (this.drawingX2 - this.drawingX1) / 2;\n        this.drawingHeight = this.drawingY2 - this.drawingY1;\n        this.drawingWidth = this.drawingX2 - this.drawingX1;\n\n    };\n\n    this.IsGenerationDisplayed = function (genidx) {\n        //returns if generation is to be displayed\n        //also counts displayed families and displayed person\n\n        var idx = 0;\n        var isGenDisplayed = false;\n        this.curGenPerCount = 0;\n        this.familyCount = 0;\n\n        while (idx < this.generations[genidx].length) {\n\n            if (this.generations[genidx][idx].IsDisplayed) {\n                if (this.generations[genidx][idx].IsFamilyStart) {\n                    this.familyCount++;\n                }\n\n                this.curGenPerCount++;\n\n                isGenDisplayed = true;\n            }\n            idx++;\n        }\n\n        return isGenDisplayed;\n    };\n\n\n    //IsGenerationDisplayed\n    //must be run first\n    this.SetScheduleVars = function (genidx) {\n        var idx = 0;\n        var _firstx1 = 0.0;\n        var _lastx2 = 0.0;\n        var innercount = 0;\n\n\n\n        if (genidx == 0) {\n            this.drawingX1 = this.startx1;\n            this.startx1 = this.centrePoint - (((this.generations[genidx].length * this.boxWidth) + ((this.generations[genidx].length - 1) * this.distanceBetweenBoxs)) / 2);\n        }\n        else {\n\n//            if (genidx == 4) {\n//                console.log('error');\n//            }\n\n            var firstPerson = null;\n            var lastPerson = null;\n\n            while (idx < this.generations[genidx - 1].length) {\n                // in the preceeding generation there should always be at least one person with \n                // a child!!! \n                if (this.generations[genidx - 1][idx].ChildLst.length > 0 &&\n                    this.generations[genidx - 1][idx].IsDisplayed) {\n\n                    if (innercount == 0) {\n                        _firstx1 = this.generations[genidx - 1][idx].X1;\n                        _lastx2 = this.generations[genidx - 1][idx].X1;\n\n                        firstPerson = this.generations[genidx - 1][idx];\n                        lastPerson = this.generations[genidx - 1][idx];\n                    }\n                    else {\n                        if (_firstx1 > this.generations[genidx - 1][idx].X1) {\n                            _firstx1 = this.generations[genidx - 1][idx].X1;\n                            firstPerson = this.generations[genidx - 1][idx];\n                        }\n                        if (_lastx2 < this.generations[genidx - 1][idx].X1) {\n                            _lastx2 = this.generations[genidx - 1][idx].X1;\n                            lastPerson = this.generations[genidx - 1][idx];\n                        }\n                    }\n                    innercount++;\n                }\n                idx++;\n            }\n\n            _lastx2 += this.boxWidth;\n\n          //  console.log(genidx);\n           // console.log('first and last: ' + _firstx1 + ' ' + _lastx2);\n           // console.log('first and last persons: ' + firstPerson.Name + ' ' + lastPerson.Name);\n\n            this.startx1 = _firstx1 + (this.boxWidth / 2);\n            this.endx2 = _lastx2 - (this.boxWidth / 2);\n\n            var _prevGenLen = this.endx2 - this.startx1;\n            var _curGenLen = 0.0;\n\n            _curGenLen = (this.curGenPerCount * (this.boxWidth + this.distanceBetweenBoxs)) - (this.distanceBetweenBoxs * this.familyCount);\n\n            if (_prevGenLen > _curGenLen) {\n                this.distancesbetfam = (_prevGenLen - _curGenLen) / this.familyCount;\n            }\n            else {\n                this.distancesbetfam = (this.original_distancesbetfam / 100) * this.zoomPercentage;\n            }\n\n            //add in the distances between the families\n            _curGenLen = _curGenLen + (this.distancesbetfam * (this.familyCount - 1));\n\n            // middle of the families of the previous generation\n            var _desiredMidPoint = ((this.endx2 - this.startx1) / 2) + this.startx1;\n\n            // set new start point by subtracting half the total space required for the generation\n            this.startx1 = _desiredMidPoint - (_curGenLen / 2);\n        }\n\n    }\n\n    this.fillGenXs = function (genidx) {\n\n        var idx = 0;\n        var _currentDistanceBetweenBoxes = 0.0;\n        var innerIdx = 0;\n        var prevPerson = null;\n\n\n        while (idx < this.generations[genidx].length) {\n\n            if (this.generations[genidx][idx].IsDisplayed) {\n\n                if (innerIdx == 0) {\n                    this.generations[genidx][idx].X1 = this.startx1;\n                    this.generations[genidx][idx].X2 = this.startx1 + this.boxWidth;\n                }\n                else {\n                    if (this.generations[genidx][idx].IsFamilyStart) {\n                        _currentDistanceBetweenBoxes = this.distancesbetfam;\n                    }\n                    else {\n                        _currentDistanceBetweenBoxes = this.distanceBetweenBoxs;\n                    }\n\n                    this.generations[genidx][idx].X1 = prevPerson.X1 + this.boxWidth + _currentDistanceBetweenBoxes;\n                    this.generations[genidx][idx].X2 = this.generations[genidx][idx].X1 + this.boxWidth;\n                }\n\n                prevPerson = this.generations[genidx][idx];\n\n                innerIdx++;\n\n\n\n            }\n//            else {\n//                this.generations[genidx][idx].X1 = 0;\n//                this.generations[genidx][idx].X2 = 0;\n//            }\n            idx++;\n        }\n    }\n\n    this.createFamilyCountArray = function (genidx) {\n\n        var newswitchs = Array();\n        var leftCounter = 0.0;\n        var rightCounter = 0.0;\n        var idx = 0;\n\n        if (genidx != 0) {\n            while (idx < this.generations[genidx].length) {\n                var _tp = this.generations[genidx][idx];\n                if (_tp.IsParentalLink &&\n                        _tp.IsDisplayed) {\n                    newswitchs.push(0.0);\n                    if (_tp.X1 > this.MiddleParents(genidx, _tp.FatherIdx, _tp.MotherIdx)) {\n                        rightCounter++;\n                        if (leftCounter > 0)\n                            newswitchs[newswitchs.length - 2] = leftCounter;\n                        leftCounter = 0;\n                    }\n                    else {\n                        leftCounter++;\n                        if (rightCounter > 0)\n                            newswitchs[newswitchs.length - 2] = rightCounter;\n                        rightCounter = 0;\n                    }\n                }\n                idx++;\n            }\n            if (leftCounter != 0) newswitchs[newswitchs.length - 1] = leftCounter;\n            if (rightCounter != 0) newswitchs[newswitchs.length - 1] = rightCounter;\n            idx = newswitchs.length - 1;\n            while (idx > 0) {\n                if (newswitchs[idx - 1] == 0)\n                    newswitchs[idx - 1] = newswitchs[idx];\n                idx--;\n            }\n        }\n        return newswitchs;\n    }\n\n    this.MiddleParents = function (genidx, fatIdx, motIdx) {\n\n        //  var midparents = fatIdx - motIdx;\n        var middleParents = 0.0;\n\n        //        if (midparents < 0) {\n        //            midparents = midparents + (midparents * 2);\n        //        }\n\n        if (Math.abs(fatIdx - motIdx) > 1) {\n            if (fatIdx < motIdx) {\n                middleParents = (this.generations[genidx - 1][motIdx - 1].X1 + this.generations[genidx - 1][motIdx].X2) / 2;\n            }\n            else {\n                middleParents = (this.generations[genidx - 1][fatIdx - 1].X1 + this.generations[genidx - 1][fatIdx].X2) / 2;\n            }\n        }\n        else {\n            middleParents = (this.generations[genidx - 1][fatIdx].X1 + this.generations[genidx - 1][motIdx].X2) / 2;\n        }\n\n        return middleParents;\n    }\n\n    this.GetParentXs = function (genidx, fatIdx, motIdx) {\n\n\n        if (genidx < 1) {\n            this.secondPX = this.centrePoint;\n            this.firstPX = this.centrePoint;\n        }\n        else {\n            if (this.generations[genidx - 1][fatIdx].X1 > this.generations[genidx - 1][motIdx].X1) {\n                this.secondPX = this.generations[genidx - 1][fatIdx].X1 + this.halfBox;\n                this.firstPX = this.generations[genidx - 1][motIdx].X1 + this.halfBox;\n\n            }\n            else {\n                this.secondPX = this.generations[genidx - 1][motIdx].X1 + this.halfBox;\n                this.firstPX = this.generations[genidx - 1][fatIdx].X1 + this.halfBox;\n            }\n        }\n\n    }\n\n    this.GetFirst = function (genidx, fatIdx, motIdx) {\n\n\n\n        var middleParents = this.MiddleParents(genidx, fatIdx, motIdx);\n        var nextParentLink = middleParents;\n        var idxParentLink = motIdx;\n\n        // if we only have 1 parent, but that parent \n        // later remarries we want the next nextparent setting to the current parents edge\n        if (fatIdx == motIdx) {\n            //remember fatidx and motidx are the same!\n            if (this.generations[genidx - 1][fatIdx].SpouseLst.length > 0) {\n                return this.generations[genidx - 1][fatIdx].X2;\n            }\n        }\n\n        // if multiple spouses set next parent as end of first one\n        if (this.generations[genidx - 1][fatIdx].SpouseLst.length > 1) {\n            if (Math.abs(fatIdx - motIdx) == 1) {\n                return nextParentLink;\n            }\n        }\n\n\n        if (fatIdx > motIdx) idxParentLink = fatIdx;\n\n        var rightX2OfCurrentParent = this.generations[genidx - 1][idxParentLink].X2;\n\n        var idx = 0;\n        \n        var _treePerson = null;\n\n        var isFound = false;\n        while (idx < this.generations[genidx - 1].length) {\n            if (this.generations[genidx - 1][idx].IsDisplayed\n                && this.generations[genidx - 1][idx].ChildCount > 0\n                && this.generations[genidx - 1][idx].X1 > rightX2OfCurrentParent) {\n                isFound = true;\n                _treePerson = this.generations[genidx - 1][idx];\n                break;\n            }\n            idx++;\n        }\n\n      //  if (_treePerson != null)\n      //      console.log('first person ' + _treePerson.Name);\n \n        if (isFound)\n            nextParentLink = this.generations[genidx - 1][idx].X1\n\n        return nextParentLink;\n    }\n\n    this.GetPrev = function (genidx, fatIdx, motIdx) {\n\n        var middleParents = (this.generations[genidx - 1][fatIdx].X1 + this.generations[genidx - 1][motIdx].X2) / 2;\n\n        var prevParentLink = middleParents;\n\n        //left parent\n        var idxParentLink = fatIdx;\n        if (fatIdx > motIdx) idxParentLink = motIdx;\n\n        var currentParentsLeft = this.generations[genidx - 1][idxParentLink].X1;\n\n        if (this.generations[genidx - 1][fatIdx].SpouseLst.length > 1) {\n\n            if (Math.abs(fatIdx - motIdx) == 2) {\n                return prevParentLink;\n            }\n\n        }\n\n\n        var idx = 0;\n\n        var _treePerson = null;\n\n        while (idx < this.generations[genidx - 1].length) {\n            if (this.generations[genidx - 1][idx].IsDisplayed\n                    && this.generations[genidx - 1][idx].ChildCount > 0\n                    && this.generations[genidx - 1][idx].X1 < currentParentsLeft) {\n                _treePerson = this.generations[genidx - 1][idx];\n\n            }\n            idx++;\n        }\n\n       // if(_treePerson != null)\n     //   console.log('last person ' + _treePerson.Name);\n\n        if (_treePerson != null)\n            prevParentLink = _treePerson.X2;\n\n\n        return prevParentLink;\n    }\n\n}"]],"start1":0,"start2":0,"length1":0,"length2":27568}]],"length":27568}
{"contributors":[],"silentsave":false,"ts":1355014855627,"patch":[[{"diffs":[[-1,"ï»¿"],[1,"var TreeBase;"],[0,"\n\n\n\n"]],"start1":0,"start2":0,"length1":5,"length2":17}]],"length":27580,"saved":false}
