{"ts":1354982009556,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1354982019449,"patch":[[{"diffs":[[1,"\r\nArray.prototype.LinkContainingPoint = function (mx,my) {\r\n\r\n    for (var i = 0; i < this.length; i++) {\r\n\r\n        if ((this[i].x1 <= mx && this[i].x2 >= mx) \r\n        && (this[i].y1 <= my && this[i].y2 >= my))                      \r\n        {\r\n            return this[i];\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return null;\r\n\r\n};\r\n\r\n\r\n\r\n"]],"start1":0,"start2":0,"length1":0,"length2":330}]],"length":330,"saved":false}
{"ts":1354984069047,"patch":[[{"diffs":[[0,"l;\r\n\r\n};\r\n\r\n\r\n\r\n"],[1,"Array.prototype.ContainsPerson = function (value) {\r\n\r\n    for (var i = 0; i < this.length; i++) {\r\n\r\n        if (this[i].PersonId == value.PersonId) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return false;\r\n\r\n};\r\n\r\n\r\nArray.prototype.SortByGenIdx = function()\r\n{\r\n    for(var i=0;i<this.length;i++)\r\n\t{\r\n\t\tfor(var j=i+1;j<this.length;j++)\r\n\t\t{\r\n\t\t\tif(Number(this[i].GenerationIdx) < Number(this[j].GenerationIdx))\r\n\t\t\t{\r\n\t\t\t\tvar tempValue = this[j];\r\n\t\t\t\tthis[j] = this[i];\r\n\t\t\t\tthis[i] = tempValue;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n"]],"start1":314,"start2":314,"length1":16,"length2":550}]],"length":864,"saved":false}
{"contributors":[],"silentsave":false,"ts":1354999158123,"patch":[[{"diffs":[[1,"//USAGE EXAMPLES \r\n\r\n// using debounce in a constructor or initialization function to debounce\r\n// focus events for a widget (onFocus is the original handler):\r\n//this.debouncedOnFocus = this.onFocus.debounce(500, false);\r\n//this.inputNode.addEventListener('focus', this.debouncedOnFocus, false);\r\n\r\n//// to coordinate the debounce of a method for all objects of a certain class, do this:\r\n//MyClass.prototype.someMethod = function () {\r\n//    /* do something here, but only once */\r\n//} .debounce(100, true); // execute at start and use a 100 msec detection period\r\n\r\n//// wait until the user is done moving the mouse, then execute\r\n//// (using the stand-alone version)\r\n//document.onmousemove = debounce(function (e) {\r\n//    /* do something here, but only once after mouse cursor stops */\r\n//}, 250, false);\r\n//http://ajaxian.com/archives/debounce-your-javascript-functions\r\nFunction.prototype.debounce = function (threshold, execAsap) {\r\n    var func = this, // reference to original function\r\n            timeout; // handle to setTimeout async task (detection period)\r\n    // return the new debounced function which executes the original function only once\r\n    // until the detection period expires\r\n    return function debounced() {\r\n        var obj = this, // reference to original context object\r\n                args = arguments; // arguments at execution time\r\n        // this is the detection function. it will be executed if/when the threshold expires\r\n        function delayed() {\r\n            // if we're executing at the end of the detection period\r\n            if (!execAsap)\r\n                func.apply(obj, args); // execute now\r\n            // clear timeout handle\r\n            timeout = null;\r\n        };\r\n        // stop any current detection period\r\n        if (timeout)\r\n            clearTimeout(timeout);\r\n        // otherwise, if we're not already waiting and we're executing at the beginning of the waiting period\r\n        else if (execAsap)\r\n            func.apply(obj, args); // execute now\r\n        // reset the waiting period\r\n        timeout = setTimeout(delayed, threshold || 100);\r\n    };\r\n}\r\n\r\n//remove invalid selections from an array\r\nArray.prototype.RemoveInvalid = function (selection) {\r\n    var filteredArray = new Array();\r\n    for (var si = 0; si < selection.length; si++) {\r\n        for (var i = 0; i < this.length; i++) {\r\n            if (this[i] == selection[si]) {\r\n                filteredArray.push(this[i]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return filteredArray;\r\n}\r\n\r\n\r\n\r\n"],[0,"\r\nArray.prototype.LinkCo"]],"start1":0,"start2":0,"length1":24,"length2":2576}]],"length":3416,"saved":false}
