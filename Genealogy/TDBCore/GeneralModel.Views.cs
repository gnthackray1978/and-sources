//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets0323555C88646EB64FDE84E4A5F0FCEB293A4A484766D2D729B042B2675BE8D6))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets0323555C88646EB64FDE84E4A5F0FCEB293A4A484766D2D729B042B2675BE8D6 : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySets0323555C88646EB64FDE84E4A5F0FCEB293A4A484766D2D729B042B2675BE8D6()
        {
            this.EdmEntityContainerName = "GeneralModelContainer";
            this.StoreEntityContainerName = "GeneralModelStoreContainer";
            this.HashOverMappingClosure = "cbab1e728960cbce1ce92224b1471cdcb8c5fa1516e5c9c98f44718b1bd817ad";
            this.HashOverAllExtentViews = "264cf1663852fd09dc811ae78e46d32dfe2317e8f1f6d58746b9475e48762b22";
            this.ViewCount = 57;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            if ((index == 7))
            {
                return GetView7();
            }
            if ((index == 8))
            {
                return GetView8();
            }
            if ((index == 9))
            {
                return GetView9();
            }
            if ((index == 10))
            {
                return GetView10();
            }
            if ((index == 11))
            {
                return GetView11();
            }
            if ((index == 12))
            {
                return GetView12();
            }
            if ((index == 13))
            {
                return GetView13();
            }
            if ((index == 14))
            {
                return GetView14();
            }
            if ((index == 15))
            {
                return GetView15();
            }
            if ((index == 16))
            {
                return GetView16();
            }
            if ((index == 17))
            {
                return GetView17();
            }
            if ((index == 18))
            {
                return GetView18();
            }
            if ((index == 19))
            {
                return GetView19();
            }
            if ((index == 20))
            {
                return GetView20();
            }
            if ((index == 21))
            {
                return GetView21();
            }
            if ((index == 22))
            {
                return GetView22();
            }
            if ((index == 23))
            {
                return GetView23();
            }
            if ((index == 24))
            {
                return GetView24();
            }
            if ((index == 25))
            {
                return GetView25();
            }
            if ((index == 26))
            {
                return GetView26();
            }
            if ((index == 27))
            {
                return GetView27();
            }
            if ((index == 28))
            {
                return GetView28();
            }
            if ((index == 29))
            {
                return GetView29();
            }
            if ((index == 30))
            {
                return GetView30();
            }
            if ((index == 31))
            {
                return GetView31();
            }
            if ((index == 32))
            {
                return GetView32();
            }
            if ((index == 33))
            {
                return GetView33();
            }
            if ((index == 34))
            {
                return GetView34();
            }
            if ((index == 35))
            {
                return GetView35();
            }
            if ((index == 36))
            {
                return GetView36();
            }
            if ((index == 37))
            {
                return GetView37();
            }
            if ((index == 38))
            {
                return GetView38();
            }
            if ((index == 39))
            {
                return GetView39();
            }
            if ((index == 40))
            {
                return GetView40();
            }
            if ((index == 41))
            {
                return GetView41();
            }
            if ((index == 42))
            {
                return GetView42();
            }
            if ((index == 43))
            {
                return GetView43();
            }
            if ((index == 44))
            {
                return GetView44();
            }
            if ((index == 45))
            {
                return GetView45();
            }
            if ((index == 46))
            {
                return GetView46();
            }
            if ((index == 47))
            {
                return GetView47();
            }
            if ((index == 48))
            {
                return GetView48();
            }
            if ((index == 49))
            {
                return GetView49();
            }
            if ((index == 50))
            {
                return GetView50();
            }
            if ((index == 51))
            {
                return GetView51();
            }
            if ((index == 52))
            {
                return GetView52();
            }
            if ((index == 53))
            {
                return GetView53();
            }
            if ((index == 54))
            {
                return GetView54();
            }
            if ((index == 55))
            {
                return GetView55();
            }
            if ((index == 56))
            {
                return GetView56();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for GeneralModelStoreContainer.Marriages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3519);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Marriages\r\n        [GeneralModel.Store.Marria");
            viewString.Append("ges](T1.[Marriages.Marriage_Id], T1.Marriages_MaleCName, T1.Marriages_MaleSName,");
            viewString.Append(" T1.Marriages_MaleLocation, T1.Marriages_MaleInfo, T1.Marriages_FemaleCName, T1.");
            viewString.Append("Marriages_FemaleSName, T1.Marriages_FemaleLocation, T1.Marriages_FemaleInfo, T1.");
            viewString.Append("Marriages_Date, T1.Marriages_MarriageLocation, T1.Marriages_YearIntVal, T1.Marri");
            viewString.Append("ages_MarriageCounty, T1.Marriages_Source, T1.Marriages_Witness1, T1.Marriages_Wi");
            viewString.Append("tness2, T1.Marriages_Witness3, T1.Marriages_Witness4, T1.Marriages_DateAdded, T1");
            viewString.Append(".Marriages_DateLastEdit, T1.Marriages_UserId, T1.Marriages_OrigMaleSurname, T1.M");
            viewString.Append("arriages_OrigFemaleSurname, T1.Marriages_MaleOccupation, T1.Marriages_FemaleOccu");
            viewString.Append("pation, T1.Marriages_FemaleIsKnownWidow, T1.Marriages_MaleIsKnownWidower, T1.Mar");
            viewString.Append("riages_IsBanns, T1.Marriages_IsLicence, T1.Marriages_MarriageLocationId, T1.Marr");
            viewString.Append("iages_MaleLocationId, T1.Marriages_FemaleLocationId, T1.Marriages_MaleBirthYear,");
            viewString.Append(" T1.Marriages_FemaleBirthYear, T1.Marriages_UniqueRef, T1.Marriages_TotalEvents,");
            viewString.Append(" T1.Marriages_EventPriority, T1.Marriages_MaleId, T1.Marriages_FemaleId, T1.Marr");
            viewString.Append("iages_IsDeleted, T1.Marriages_IsComposite)\r\n    FROM (\r\n        SELECT \r\n       ");
            viewString.Append("     T.Marriage_Id AS [Marriages.Marriage_Id], \r\n            T.MaleCName AS Marr");
            viewString.Append("iages_MaleCName, \r\n            T.MaleSName AS Marriages_MaleSName, \r\n           ");
            viewString.Append(" T.MaleLocation AS Marriages_MaleLocation, \r\n            T.MaleInfo AS Marriages");
            viewString.Append("_MaleInfo, \r\n            T.FemaleCName AS Marriages_FemaleCName, \r\n            T");
            viewString.Append(".FemaleSName AS Marriages_FemaleSName, \r\n            T.FemaleLocation AS Marriag");
            viewString.Append("es_FemaleLocation, \r\n            T.FemaleInfo AS Marriages_FemaleInfo, \r\n       ");
            viewString.Append("     T.Date AS Marriages_Date, \r\n            T.MarriageLocation AS Marriages_Mar");
            viewString.Append("riageLocation, \r\n            T.YearIntVal AS Marriages_YearIntVal, \r\n           ");
            viewString.Append(" T.MarriageCounty AS Marriages_MarriageCounty, \r\n            T.Source AS Marriag");
            viewString.Append("es_Source, \r\n            T.Witness1 AS Marriages_Witness1, \r\n            T.Witne");
            viewString.Append("ss2 AS Marriages_Witness2, \r\n            T.Witness3 AS Marriages_Witness3, \r\n   ");
            viewString.Append("         T.Witness4 AS Marriages_Witness4, \r\n            T.DateAdded AS Marriage");
            viewString.Append("s_DateAdded, \r\n            T.DateLastEdit AS Marriages_DateLastEdit, \r\n         ");
            viewString.Append("   T.UserId AS Marriages_UserId, \r\n            T.OrigMaleSurname AS Marriages_Or");
            viewString.Append("igMaleSurname, \r\n            T.OrigFemaleSurname AS Marriages_OrigFemaleSurname,");
            viewString.Append(" \r\n            T.MaleOccupation AS Marriages_MaleOccupation, \r\n            T.Fem");
            viewString.Append("aleOccupation AS Marriages_FemaleOccupation, \r\n            T.FemaleIsKnownWidow ");
            viewString.Append("AS Marriages_FemaleIsKnownWidow, \r\n            T.MaleIsKnownWidower AS Marriages");
            viewString.Append("_MaleIsKnownWidower, \r\n            T.IsBanns AS Marriages_IsBanns, \r\n           ");
            viewString.Append(" T.IsLicence AS Marriages_IsLicence, \r\n            T.MarriageLocationId AS Marri");
            viewString.Append("ages_MarriageLocationId, \r\n            T.MaleLocationId AS Marriages_MaleLocatio");
            viewString.Append("nId, \r\n            T.FemaleLocationId AS Marriages_FemaleLocationId, \r\n         ");
            viewString.Append("   T.MaleBirthYear AS Marriages_MaleBirthYear, \r\n            T.FemaleBirthYear A");
            viewString.Append("S Marriages_FemaleBirthYear, \r\n            T.UniqueRef AS Marriages_UniqueRef, \r");
            viewString.Append("\n            T.TotalEvents AS Marriages_TotalEvents, \r\n            T.EventPriori");
            viewString.Append("ty AS Marriages_EventPriority, \r\n            T.MaleId AS Marriages_MaleId, \r\n   ");
            viewString.Append("         T.FemaleId AS Marriages_FemaleId, \r\n            T.IsDeleted AS Marriage");
            viewString.Append("s_IsDeleted, \r\n            T.IsComposite AS Marriages_IsComposite, \r\n           ");
            viewString.Append(" True AS _from0\r\n        FROM GeneralModelContainer.Marriages AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelStoreContainer.Marriages", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for GeneralModelStoreContainer.Parishs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelStoreContainer.Parishs", @"
    SELECT VALUE -- Constructing Parishs
        [GeneralModel.Store.Parishs](T1.Parishs_ParishId, T1.Parishs_ParishName, T1.Parishs_ParishRegistersDeposited, T1.Parishs_ParishNotes, T1.Parishs_ParentParish, T1.Parishs_ParishStartYear, T1.Parishs_ParishEndYear, T1.Parishs_ParishCounty, T1.Parishs_ParishX, T1.Parishs_ParishY, T1.Parishs_Distance)
    FROM (
        SELECT 
            T.ParishId AS Parishs_ParishId, 
            T.ParishName AS Parishs_ParishName, 
            T.ParishRegistersDeposited AS Parishs_ParishRegistersDeposited, 
            T.ParishNotes AS Parishs_ParishNotes, 
            T.ParentParish AS Parishs_ParentParish, 
            T.ParishStartYear AS Parishs_ParishStartYear, 
            T.ParishEndYear AS Parishs_ParishEndYear, 
            T.ParishCounty AS Parishs_ParishCounty, 
            T.ParishX AS Parishs_ParishX, 
            T.ParishY AS Parishs_ParishY, 
            T.Distance AS Parishs_Distance, 
            True AS _from0
        FROM GeneralModelContainer.Parishs AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelStoreContainer.SourceMappingParishs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2131);
            viewString.Append("\r\n    SELECT VALUE -- Constructing SourceMappingParishs\r\n        [GeneralModel.S");
            viewString.Append("tore.SourceMappingParishs](T4.SourceMappingParishs_SourceMappingParishsRowId, T4");
            viewString.Append(".SourceMappingParishs_SourceMappingParishId, T4.SourceMappingParishs_SourceMappi");
            viewString.Append("ngSourceId, T4.SourceMappingParishs_SourceMappingDateAdded, T4.SourceMappingPari");
            viewString.Append("shs_SourceMappingUser)\r\n    FROM (\r\n        SELECT T1.SourceMappingParishs_Sourc");
            viewString.Append("eMappingParishsRowId, T2.SourceMappingParishs_SourceMappingParishId, T3.SourceMa");
            viewString.Append("ppingParishs_SourceMappingSourceId, T1.SourceMappingParishs_SourceMappingDateAdd");
            viewString.Append("ed, T1.SourceMappingParishs_SourceMappingUser, T1._from0, (T2._from1 AND T2._fro");
            viewString.Append("m1 IS NOT NULL) AS _from1, (T3._from2 AND T3._from2 IS NOT NULL) AS _from2\r\n    ");
            viewString.Append("    FROM  (\r\n            SELECT \r\n                T.SourceMappingParishsRowId AS");
            viewString.Append(" SourceMappingParishs_SourceMappingParishsRowId, \r\n                T.SourceMappi");
            viewString.Append("ngDateAdded AS SourceMappingParishs_SourceMappingDateAdded, \r\n                T.");
            viewString.Append("SourceMappingUser AS SourceMappingParishs_SourceMappingUser, \r\n                T");
            viewString.Append("rue AS _from0\r\n            FROM GeneralModelContainer.SourceMappingParishs AS T)");
            viewString.Append(" AS T1\r\n            LEFT OUTER JOIN (\r\n            SELECT \r\n                Key(");
            viewString.Append("T.SourceMappingParish).SourceMappingParishsRowId AS SourceMappingParishs_SourceM");
            viewString.Append("appingParishsRowId, \r\n                Key(T.Parish).ParishId AS SourceMappingPar");
            viewString.Append("ishs_SourceMappingParishId, \r\n                True AS _from1\r\n            FROM G");
            viewString.Append("eneralModelContainer.FK_SourceMappingParishs_Parishs AS T) AS T2\r\n            ON");
            viewString.Append(" T1.SourceMappingParishs_SourceMappingParishsRowId = T2.SourceMappingParishs_Sou");
            viewString.Append("rceMappingParishsRowId\r\n            LEFT OUTER JOIN (\r\n            SELECT \r\n    ");
            viewString.Append("            Key(T.SourceMappingParish).SourceMappingParishsRowId AS SourceMappin");
            viewString.Append("gParishs_SourceMappingParishsRowId, \r\n                Key(T.Source).SourceId AS ");
            viewString.Append("SourceMappingParishs_SourceMappingSourceId, \r\n                True AS _from2\r\n  ");
            viewString.Append("          FROM GeneralModelContainer.FK_SourceMappingParishs_Sources AS T) AS T3");
            viewString.Append("\r\n            ON T1.SourceMappingParishs_SourceMappingParishsRowId = T3.SourceMa");
            viewString.Append("ppingParishs_SourceMappingParishsRowId\r\n    ) AS T4");
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelStoreContainer.SourceMappingParishs", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for GeneralModelStoreContainer.SourceMappings
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3133);
            viewString.Append("\r\n    SELECT VALUE -- Constructing SourceMappings\r\n        [GeneralModel.Store.S");
            viewString.Append("ourceMappings](T7.SourceMappings_MappingId, T7.SourceMappings_SourceId, T7.Sourc");
            viewString.Append("eMappings_FileRecordId, T7.SourceMappings_MarriageRecordId, T7.SourceMappings_Pe");
            viewString.Append("rsonRecordId, T7.SourceMappings_UserId, T7.SourceMappings_DateAdded, T7.SourceMa");
            viewString.Append("ppings_MapTypeId)\r\n    FROM (\r\n        SELECT T1.SourceMappings_MappingId, T6.So");
            viewString.Append("urceMappings_SourceId, T5.SourceMappings_FileRecordId, T2.SourceMappings_Marriag");
            viewString.Append("eRecordId, T3.SourceMappings_PersonRecordId, T1.SourceMappings_UserId, T1.Source");
            viewString.Append("Mappings_DateAdded, T4.SourceMappings_MapTypeId, T1._from0, (T2._from1 AND T2._f");
            viewString.Append("rom1 IS NOT NULL) AS _from1, (T6._from2 AND T6._from2 IS NOT NULL) AS _from2, (T");
            viewString.Append("4._from3 AND T4._from3 IS NOT NULL) AS _from3, (T5._from4 AND T5._from4 IS NOT N");
            viewString.Append("ULL) AS _from4, (T3._from5 AND T3._from5 IS NOT NULL) AS _from5\r\n        FROM  (");
            viewString.Append("\r\n            SELECT \r\n                T.MappingId AS SourceMappings_MappingId, ");
            viewString.Append("\r\n                T.UserId AS SourceMappings_UserId, \r\n                T.DateAdd");
            viewString.Append("ed AS SourceMappings_DateAdded, \r\n                True AS _from0\r\n            FR");
            viewString.Append("OM GeneralModelContainer.SourceMappings AS T) AS T1\r\n            LEFT OUTER JOIN");
            viewString.Append(" (\r\n            SELECT \r\n                Key(T.SourceMapping).MappingId AS Sourc");
            viewString.Append("eMappings_MappingId, \r\n                Key(T.Marriage).Marriage_Id AS SourceMapp");
            viewString.Append("ings_MarriageRecordId, \r\n                True AS _from1\r\n            FROM Genera");
            viewString.Append("lModelContainer.FK_SourceMappings_Marriages AS T) AS T2\r\n            ON T1.Sourc");
            viewString.Append("eMappings_MappingId = T2.SourceMappings_MappingId\r\n            LEFT OUTER JOIN (");
            viewString.Append("\r\n            SELECT \r\n                Key(T.SourceMapping).MappingId AS SourceM");
            viewString.Append("appings_MappingId, \r\n                Key(T.Person).Person_id AS SourceMappings_P");
            viewString.Append("ersonRecordId, \r\n                True AS _from5\r\n            FROM GeneralModelCo");
            viewString.Append("ntainer.FK_SourceMappings_Persons AS T) AS T3\r\n            ON T1.SourceMappings_");
            viewString.Append("MappingId = T3.SourceMappings_MappingId\r\n            LEFT OUTER JOIN (\r\n        ");
            viewString.Append("    SELECT \r\n                Key(T.SourceMapping).MappingId AS SourceMappings_Ma");
            viewString.Append("ppingId, \r\n                Key(T.SourceType).SourceTypeId AS SourceMappings_MapT");
            viewString.Append("ypeId, \r\n                True AS _from3\r\n            FROM GeneralModelContainer.");
            viewString.Append("FK_SourceMappings_SourceTypes AS T) AS T4\r\n            ON T1.SourceMappings_Mapp");
            viewString.Append("ingId = T4.SourceMappings_MappingId\r\n            LEFT OUTER JOIN (\r\n            ");
            viewString.Append("SELECT \r\n                Key(T.SourceMapping).MappingId AS SourceMappings_Mappin");
            viewString.Append("gId, \r\n                Key(T.File).FiletId AS SourceMappings_FileRecordId, \r\n   ");
            viewString.Append("             True AS _from4\r\n            FROM GeneralModelContainer.FK_SourceMap");
            viewString.Append("pings_Files AS T) AS T5\r\n            ON T1.SourceMappings_MappingId = T5.SourceM");
            viewString.Append("appings_MappingId\r\n            LEFT OUTER JOIN (\r\n            SELECT \r\n         ");
            viewString.Append("       Key(T.SourceMapping).MappingId AS SourceMappings_MappingId, \r\n           ");
            viewString.Append("     Key(T.Source).SourceId AS SourceMappings_SourceId, \r\n                True A");
            viewString.Append("S _from2\r\n            FROM GeneralModelContainer.FK_SourceMappings_Sources AS T)");
            viewString.Append(" AS T6\r\n            ON T1.SourceMappings_MappingId = T6.SourceMappings_MappingId");
            viewString.Append("\r\n    ) AS T7");
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelStoreContainer.SourceMappings", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for GeneralModelStoreContainer.Sources
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelStoreContainer.Sources", @"
    SELECT VALUE -- Constructing Sources
        [GeneralModel.Store.Sources](T1.Sources_SourceId, T1.Sources_SourceRef, T1.Sources_SourceDate, T1.Sources_SourceDateTo, T1.Sources_SourceDateStr, T1.Sources_SourceDateStrTo, T1.Sources_OriginalLocation, T1.Sources_IsCopyHeld, T1.Sources_IsViewed, T1.Sources_IsThackrayFound, T1.Sources_DateAdded, T1.Sources_UserId, T1.Sources_SourceNotes, T1.Sources_SourceFileCount, T1.Sources_SourceDescription)
    FROM (
        SELECT 
            T.SourceId AS Sources_SourceId, 
            T.SourceRef AS Sources_SourceRef, 
            T.SourceDate AS Sources_SourceDate, 
            T.SourceDateTo AS Sources_SourceDateTo, 
            T.SourceDateStr AS Sources_SourceDateStr, 
            T.SourceDateStrTo AS Sources_SourceDateStrTo, 
            T.OriginalLocation AS Sources_OriginalLocation, 
            T.IsCopyHeld AS Sources_IsCopyHeld, 
            T.IsViewed AS Sources_IsViewed, 
            T.IsThackrayFound AS Sources_IsThackrayFound, 
            T.DateAdded AS Sources_DateAdded, 
            T.UserId AS Sources_UserId, 
            T.SourceNotes AS Sources_SourceNotes, 
            T.SourceFileCount AS Sources_SourceFileCount, 
            T.SourceDescription AS Sources_SourceDescription, 
            True AS _from0
        FROM GeneralModelContainer.Sources AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelStoreContainer.SourceTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelStoreContainer.SourceTypes", @"
    SELECT VALUE -- Constructing SourceTypes
        [GeneralModel.Store.SourceTypes](T1.SourceTypes_SourceTypeId, T1.SourceTypes_SourceTypeDesc, T1.SourceTypes_SourceDateAdded, T1.SourceTypes_SourceUserAdded, T1.SourceTypes_SourceTypeOrder)
    FROM (
        SELECT 
            T.SourceTypeId AS SourceTypes_SourceTypeId, 
            T.SourceTypeDesc AS SourceTypes_SourceTypeDesc, 
            T.SourceDateAdded AS SourceTypes_SourceDateAdded, 
            T.SourceUserAdded AS SourceTypes_SourceUserAdded, 
            T.SourceTypeOrder AS SourceTypes_SourceTypeOrder, 
            True AS _from0
        FROM GeneralModelContainer.SourceTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelStoreContainer.Relations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelStoreContainer.Relations", "\r\n    SELECT VALUE -- Constructing Relations\r\n        [GeneralModel.Store.Relatio" +
                    "ns](T5.Relations_RelationId, T5.Relations_PersonA, T5.Relations_PersonB, T5.Rela" +
                    "tions_RelationType, T5.Relations_UserId, T5.Relations_DateAdded)\r\n    FROM (\r\n  " +
                    "      SELECT T1.Relations_RelationId, T4.Relations_PersonA, T3.Relations_PersonB" +
                    ", T2.Relations_RelationType, T1.Relations_UserId, T1.Relations_DateAdded, T1._fr" +
                    "om0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T4._from2 AND T4._from2 I" +
                    "S NOT NULL) AS _from2, (T3._from3 AND T3._from3 IS NOT NULL) AS _from3\r\n        " +
                    "FROM  (\r\n            SELECT \r\n                T.RelationId AS Relations_Relation" +
                    "Id, \r\n                T.UserId AS Relations_UserId, \r\n                T.DateAdde" +
                    "d AS Relations_DateAdded, \r\n                True AS _from0\r\n            FROM Gen" +
                    "eralModelContainer.Relations AS T) AS T1\r\n            LEFT OUTER JOIN (\r\n       " +
                    "     SELECT \r\n                Key(T.Relation).RelationId AS Relations_RelationId" +
                    ", \r\n                Key(T.RelationType).RelationTypeId AS Relations_RelationType" +
                    ", \r\n                True AS _from1\r\n            FROM GeneralModelContainer.FK_Re" +
                    "lations_RelationTypes AS T) AS T2\r\n            ON T1.Relations_RelationId = T2.R" +
                    "elations_RelationId\r\n            LEFT OUTER JOIN (\r\n            SELECT \r\n       " +
                    "         Key(T.Relation).RelationId AS Relations_RelationId, \r\n                K" +
                    "ey(T.Person).Person_id AS Relations_PersonB, \r\n                True AS _from3\r\n " +
                    "           FROM GeneralModelContainer.FK_Relations_Persons1 AS T) AS T3\r\n       " +
                    "     ON T1.Relations_RelationId = T3.Relations_RelationId\r\n            LEFT OUTE" +
                    "R JOIN (\r\n            SELECT \r\n                Key(T.Relation).RelationId AS Rel" +
                    "ations_RelationId, \r\n                Key(T.Person).Person_id AS Relations_Person" +
                    "A, \r\n                True AS _from2\r\n            FROM GeneralModelContainer.FK_R" +
                    "elations_Persons AS T) AS T4\r\n            ON T1.Relations_RelationId = T4.Relati" +
                    "ons_RelationId\r\n    ) AS T5");
        }
        
        /// <Summary>
        /// return view for GeneralModelStoreContainer.RelationTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView7()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelStoreContainer.RelationTypes", @"
    SELECT VALUE -- Constructing RelationTypes
        [GeneralModel.Store.RelationTypes](T1.RelationTypes_RelationTypeId, T1.RelationTypes_RelationName, T1.RelationTypes_UserId, T1.RelationTypes_DateAdded)
    FROM (
        SELECT 
            T.RelationTypeId AS RelationTypes_RelationTypeId, 
            T.RelationName AS RelationTypes_RelationName, 
            T.UserId AS RelationTypes_UserId, 
            T.DateAdded AS RelationTypes_DateAdded, 
            True AS _from0
        FROM GeneralModelContainer.RelationTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelStoreContainer.Files
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView8()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelStoreContainer.Files", @"
    SELECT VALUE -- Constructing Files
        [GeneralModel.Store.Files](T1.Files_FiletId, T1.Files_FileDescription, T1.Files_FileLocation, T1.Files_FileContent, T1.Files_FileEntryAdded, T1.Files_FileDate, T1.Files_FilerUserAdded, T1.Files_FileThumbLocation)
    FROM (
        SELECT 
            T.FiletId AS Files_FiletId, 
            T.FileDescription AS Files_FileDescription, 
            T.FileLocation AS Files_FileLocation, 
            T.FileContent AS Files_FileContent, 
            T.FileEntryAdded AS Files_FileEntryAdded, 
            T.FileDate AS Files_FileDate, 
            T.FilerUserAdded AS Files_FilerUserAdded, 
            T.FileThumbLocation AS Files_FileThumbLocation, 
            True AS _from0
        FROM GeneralModelContainer.Files AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelStoreContainer.ParishTranscriptionDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView9()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelStoreContainer.ParishTranscriptionDetails", @"
    SELECT VALUE -- Constructing ParishTranscriptionDetails
        [GeneralModel.Store.ParishTranscriptionDetails](T3.ParishTranscriptionDetails_ParishTranscriptionId, T3.ParishTranscriptionDetails_ParishId, T3.ParishTranscriptionDetails_ParishDataString)
    FROM (
        SELECT T1.ParishTranscriptionDetails_ParishTranscriptionId, T2.ParishTranscriptionDetails_ParishId, T1.ParishTranscriptionDetails_ParishDataString, (T2._from0 AND T2._from0 IS NOT NULL) AS _from0, T1._from1
        FROM  (
            SELECT 
                T.ParishTranscriptionId AS ParishTranscriptionDetails_ParishTranscriptionId, 
                T.ParishDataString AS ParishTranscriptionDetails_ParishDataString, 
                True AS _from1
            FROM GeneralModelContainer.ParishTranscriptionDetails AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.ParishTranscriptionDetail).ParishTranscriptionId AS ParishTranscriptionDetails_ParishTranscriptionId, 
                Key(T.Parish).ParishId AS ParishTranscriptionDetails_ParishId, 
                True AS _from0
            FROM GeneralModelContainer.FK_ParishTranscriptionDetails_Parishs AS T) AS T2
            ON T1.ParishTranscriptionDetails_ParishTranscriptionId = T2.ParishTranscriptionDetails_ParishTranscriptionId
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelStoreContainer.ParishRecords
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView10()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelStoreContainer.ParishRecords", "\r\n    SELECT VALUE -- Constructing ParishRecords\r\n        [GeneralModel.Store.Par" +
                    "ishRecords](T4.ParishRecords_ParishRecordsId, T4.ParishRecords_ParishId, T4.Pari" +
                    "shRecords_DataTypeId, T4.ParishRecords_Year, T4.ParishRecords_RecordType, T4.Par" +
                    "ishRecords_OriginalRegister, T4.ParishRecords_YearEnd)\r\n    FROM (\r\n        SELE" +
                    "CT T1.ParishRecords_ParishRecordsId, T3.ParishRecords_ParishId, T2.ParishRecords" +
                    "_DataTypeId, T1.ParishRecords_Year, T1.ParishRecords_RecordType, T1.ParishRecord" +
                    "s_OriginalRegister, T1.ParishRecords_YearEnd, T1._from0, (T2._from1 AND T2._from" +
                    "1 IS NOT NULL) AS _from1, (T3._from2 AND T3._from2 IS NOT NULL) AS _from2\r\n     " +
                    "   FROM  (\r\n            SELECT \r\n                T.ParishRecordsId AS ParishReco" +
                    "rds_ParishRecordsId, \r\n                T.Year AS ParishRecords_Year, \r\n         " +
                    "       T.RecordType AS ParishRecords_RecordType, \r\n                T.OriginalReg" +
                    "ister AS ParishRecords_OriginalRegister, \r\n                T.YearEnd AS ParishRe" +
                    "cords_YearEnd, \r\n                True AS _from0\r\n            FROM GeneralModelCo" +
                    "ntainer.ParishRecords AS T) AS T1\r\n            LEFT OUTER JOIN (\r\n            SE" +
                    "LECT \r\n                Key(T.ParishRecord).ParishRecordsId AS ParishRecords_Pari" +
                    "shRecordsId, \r\n                Key(T.ParishRecordSource).RecordTypeId AS ParishR" +
                    "ecords_DataTypeId, \r\n                True AS _from1\r\n            FROM GeneralMod" +
                    "elContainer.FK_ParishRecords_ParishRecordSource AS T) AS T2\r\n            ON T1.P" +
                    "arishRecords_ParishRecordsId = T2.ParishRecords_ParishRecordsId\r\n            LEF" +
                    "T OUTER JOIN (\r\n            SELECT \r\n                Key(T.ParishRecord).ParishR" +
                    "ecordsId AS ParishRecords_ParishRecordsId, \r\n                Key(T.Parish).Paris" +
                    "hId AS ParishRecords_ParishId, \r\n                True AS _from2\r\n            FRO" +
                    "M GeneralModelContainer.FK_ParishRecords_Parishs AS T) AS T3\r\n            ON T1." +
                    "ParishRecords_ParishRecordsId = T3.ParishRecords_ParishRecordsId\r\n    ) AS T4");
        }
        
        /// <Summary>
        /// return view for GeneralModelStoreContainer.ParishRecordSource
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView11()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelStoreContainer.ParishRecordSource", @"
    SELECT VALUE -- Constructing ParishRecordSource
        [GeneralModel.Store.ParishRecordSource](T1.ParishRecordSource_RecordTypeId, T1.ParishRecordSource_RecordTypeName, T1.ParishRecordSource_RecordTypeDescription)
    FROM (
        SELECT 
            T.RecordTypeId AS ParishRecordSource_RecordTypeId, 
            T.RecordTypeName AS ParishRecordSource_RecordTypeName, 
            T.RecordTypeDescription AS ParishRecordSource_RecordTypeDescription, 
            True AS _from0
        FROM GeneralModelContainer.ParishRecordSources AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelStoreContainer.MissingRecords
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView12()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelStoreContainer.MissingRecords", "\r\n    SELECT VALUE -- Constructing MissingRecords\r\n        [GeneralModel.Store.Mi" +
                    "ssingRecords](T3.MissingRecords_MissingRecordId, T3.MissingRecords_ParishId, T3." +
                    "MissingRecords_DataTypeId, T3.MissingRecords_Year, T3.MissingRecords_RecordType," +
                    " T3.MissingRecords_OriginalRegister, T3.MissingRecords_YearEnd)\r\n    FROM (\r\n   " +
                    "     SELECT T1.MissingRecords_MissingRecordId, T2.MissingRecords_ParishId, T1.Mi" +
                    "ssingRecords_DataTypeId, T1.MissingRecords_Year, T1.MissingRecords_RecordType, T" +
                    "1.MissingRecords_OriginalRegister, T1.MissingRecords_YearEnd, T1._from0, (T2._fr" +
                    "om1 AND T2._from1 IS NOT NULL) AS _from1\r\n        FROM  (\r\n            SELECT \r\n" +
                    "                T.MissingRecordId AS MissingRecords_MissingRecordId, \r\n         " +
                    "       T.DataTypeId AS MissingRecords_DataTypeId, \r\n                T.Year AS Mi" +
                    "ssingRecords_Year, \r\n                T.RecordType AS MissingRecords_RecordType, " +
                    "\r\n                T.OriginalRegister AS MissingRecords_OriginalRegister, \r\n     " +
                    "           T.YearEnd AS MissingRecords_YearEnd, \r\n                True AS _from0" +
                    "\r\n            FROM GeneralModelContainer.MissingRecords AS T) AS T1\r\n           " +
                    " LEFT OUTER JOIN (\r\n            SELECT \r\n                Key(T.MissingRecord).Mi" +
                    "ssingRecordId AS MissingRecords_MissingRecordId, \r\n                Key(T.Parish)" +
                    ".ParishId AS MissingRecords_ParishId, \r\n                True AS _from1\r\n        " +
                    "    FROM GeneralModelContainer.FK_MissingRecords_Parishs AS T) AS T2\r\n          " +
                    "  ON T1.MissingRecords_MissingRecordId = T2.MissingRecords_MissingRecordId\r\n    " +
                    ") AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelStoreContainer.Persons
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView13()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3816);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Persons\r\n        [GeneralModel.Store.Persons]");
            viewString.Append("(T1.[Persons.Person_id], T1.Persons_MotherId, T1.Persons_FatherId, T1.Persons_Is");
            viewString.Append("Male, T1.Persons_ChristianName, T1.Persons_Surname, T1.Persons_BirthLocation, T1");
            viewString.Append(".Persons_BirthDateStr, T1.Persons_BaptismDateStr, T1.Persons_DeathDateStr, T1.Pe");
            viewString.Append("rsons_DeathLocation, T1.Persons_FatherChristianName, T1.Persons_FatherSurname, T");
            viewString.Append("1.Persons_MotherChristianName, T1.Persons_MotherSurname, T1.Persons_Source, T1.P");
            viewString.Append("ersons_BirthInt, T1.Persons_BapInt, T1.Persons_DeathInt, T1.Persons_DeathCounty,");
            viewString.Append(" T1.Persons_BirthCounty, T1.Persons_DateAdded, T1.Persons_DateLastEdit, T1.Perso");
            viewString.Append("ns_UserId, T1.Persons_OrigSurname, T1.Persons_OrigFatherSurname, T1.Persons_Orig");
            viewString.Append("MotherSurname, T1.Persons_Occupation, T1.Persons_ReferenceLocation, T1.Persons_R");
            viewString.Append("eferenceDateStr, T1.Persons_ReferenceDateInt, T1.Persons_SpouseName, T1.Persons_");
            viewString.Append("SpouseSurname, T1.Persons_FatherOccupation, T1.Persons_BirthLocationId, T1.Perso");
            viewString.Append("ns_DeathLocationId, T1.Persons_ReferenceLocationId, T1.Persons_UniqueRef, T1.Per");
            viewString.Append("sons_TotalEvents, T1.Persons_EventPriority, T1.Persons_EstBirthYearInt, T1.Perso");
            viewString.Append("ns_EstDeathYearInt, T1.Persons_IsEstBirth, T1.Persons_IsEstDeath, T1.Persons_IsD");
            viewString.Append("eleted, T1.Persons_Notes)\r\n    FROM (\r\n        SELECT \r\n            T.Person_id ");
            viewString.Append("AS [Persons.Person_id], \r\n            T.MotherId AS Persons_MotherId, \r\n        ");
            viewString.Append("    T.FatherId AS Persons_FatherId, \r\n            T.IsMale AS Persons_IsMale, \r\n");
            viewString.Append("            T.ChristianName AS Persons_ChristianName, \r\n            T.Surname AS");
            viewString.Append(" Persons_Surname, \r\n            T.BirthLocation AS Persons_BirthLocation, \r\n    ");
            viewString.Append("        T.BirthDateStr AS Persons_BirthDateStr, \r\n            T.BaptismDateStr A");
            viewString.Append("S Persons_BaptismDateStr, \r\n            T.DeathDateStr AS Persons_DeathDateStr, ");
            viewString.Append("\r\n            T.DeathLocation AS Persons_DeathLocation, \r\n            T.FatherCh");
            viewString.Append("ristianName AS Persons_FatherChristianName, \r\n            T.FatherSurname AS Per");
            viewString.Append("sons_FatherSurname, \r\n            T.MotherChristianName AS Persons_MotherChristi");
            viewString.Append("anName, \r\n            T.MotherSurname AS Persons_MotherSurname, \r\n            T.");
            viewString.Append("Source AS Persons_Source, \r\n            T.BirthInt AS Persons_BirthInt, \r\n      ");
            viewString.Append("      T.BapInt AS Persons_BapInt, \r\n            T.DeathInt AS Persons_DeathInt, ");
            viewString.Append("\r\n            T.DeathCounty AS Persons_DeathCounty, \r\n            T.BirthCounty ");
            viewString.Append("AS Persons_BirthCounty, \r\n            T.DateAdded AS Persons_DateAdded, \r\n      ");
            viewString.Append("      T.DateLastEdit AS Persons_DateLastEdit, \r\n            T.UserId AS Persons_");
            viewString.Append("UserId, \r\n            T.OrigSurname AS Persons_OrigSurname, \r\n            T.Orig");
            viewString.Append("FatherSurname AS Persons_OrigFatherSurname, \r\n            T.OrigMotherSurname AS");
            viewString.Append(" Persons_OrigMotherSurname, \r\n            T.Occupation AS Persons_Occupation, \r\n");
            viewString.Append("            T.ReferenceLocation AS Persons_ReferenceLocation, \r\n            T.Re");
            viewString.Append("ferenceDateStr AS Persons_ReferenceDateStr, \r\n            T.ReferenceDateInt AS ");
            viewString.Append("Persons_ReferenceDateInt, \r\n            T.SpouseName AS Persons_SpouseName, \r\n  ");
            viewString.Append("          T.SpouseSurname AS Persons_SpouseSurname, \r\n            T.FatherOccupa");
            viewString.Append("tion AS Persons_FatherOccupation, \r\n            T.BirthLocationId AS Persons_Bir");
            viewString.Append("thLocationId, \r\n            T.DeathLocationId AS Persons_DeathLocationId, \r\n    ");
            viewString.Append("        T.ReferenceLocationId AS Persons_ReferenceLocationId, \r\n            T.Un");
            viewString.Append("iqueRef AS Persons_UniqueRef, \r\n            T.TotalEvents AS Persons_TotalEvents");
            viewString.Append(", \r\n            T.EventPriority AS Persons_EventPriority, \r\n            T.EstBir");
            viewString.Append("thYearInt AS Persons_EstBirthYearInt, \r\n            T.EstDeathYearInt AS Persons");
            viewString.Append("_EstDeathYearInt, \r\n            T.IsEstBirth AS Persons_IsEstBirth, \r\n          ");
            viewString.Append("  T.IsEstDeath AS Persons_IsEstDeath, \r\n            T.IsDeleted AS Persons_IsDel");
            viewString.Append("eted, \r\n            T.Notes AS Persons_Notes, \r\n            True AS _from0\r\n    ");
            viewString.Append("    FROM GeneralModelContainer.Persons AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelStoreContainer.Persons", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for GeneralModelStoreContainer.MarriageRelations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView14()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2850);
            viewString.Append("\r\n    SELECT VALUE -- Constructing MarriageRelations\r\n        [GeneralModel.Stor");
            viewString.Append("e.MarriageRelations](T6.MarriageRelations_MarriageRelationId, T6.MarriageRelatio");
            viewString.Append("ns_MarriageA, T6.MarriageRelations_MarriageB, T6.MarriageRelations_UserId, T6.Ma");
            viewString.Append("rriageRelations_DateAdded, T6.MarriageRelations_MarriageRelationNotes, T6.Marria");
            viewString.Append("geRelations_RelationType)\r\n    FROM (\r\n        SELECT T4.MarriageRelations_Marri");
            viewString.Append("ageRelationId, T4.MarriageRelations_MarriageA, T4.MarriageRelations_MarriageB, T");
            viewString.Append("4.MarriageRelations_UserId, T4.MarriageRelations_DateAdded, T4.MarriageRelations");
            viewString.Append("_MarriageRelationNotes, T5.MarriageRelations_RelationType, T4._from0, T4._from1,");
            viewString.Append(" T4._from2, (T5._from3 AND T5._from3 IS NOT NULL) AS _from3\r\n        FROM  (\r\n  ");
            viewString.Append("          SELECT T1.MarriageRelations_MarriageRelationId, T2.MarriageRelations_M");
            viewString.Append("arriageA, T3.MarriageRelations_MarriageB, T1.MarriageRelations_UserId, T1.Marria");
            viewString.Append("geRelations_DateAdded, T1.MarriageRelations_MarriageRelationNotes, T1._from0, T2");
            viewString.Append("._from1, T3._from2\r\n            FROM  (\r\n                SELECT \r\n              ");
            viewString.Append("      T.MarriageRelationId AS MarriageRelations_MarriageRelationId, \r\n          ");
            viewString.Append("          T.UserId AS MarriageRelations_UserId, \r\n                    T.DateAdde");
            viewString.Append("d AS MarriageRelations_DateAdded, \r\n                    T.MarriageRelationNotes ");
            viewString.Append("AS MarriageRelations_MarriageRelationNotes, \r\n                    True AS _from0");
            viewString.Append("\r\n                FROM GeneralModelContainer.MarriageRelations AS T) AS T1\r\n    ");
            viewString.Append("            INNER JOIN (\r\n                SELECT \r\n                    Key(T.Mar");
            viewString.Append("riageRelation).MarriageRelationId AS MarriageRelations_MarriageRelationId, \r\n   ");
            viewString.Append("                 Key(T.Marriage).Marriage_Id AS MarriageRelations_MarriageA, \r\n ");
            viewString.Append("                   True AS _from1\r\n                FROM GeneralModelContainer.FK");
            viewString.Append("_MarriageRelations_Marriages AS T) AS T2\r\n                ON T1.MarriageRelation");
            viewString.Append("s_MarriageRelationId = T2.MarriageRelations_MarriageRelationId\r\n                ");
            viewString.Append("INNER JOIN (\r\n                SELECT \r\n                    Key(T.MarriageRelatio");
            viewString.Append("n).MarriageRelationId AS MarriageRelations_MarriageRelationId, \r\n               ");
            viewString.Append("     Key(T.Marriage).Marriage_Id AS MarriageRelations_MarriageB, \r\n             ");
            viewString.Append("       True AS _from2\r\n                FROM GeneralModelContainer.FK_MarriageRel");
            viewString.Append("ations_Marriages1 AS T) AS T3\r\n                ON T1.MarriageRelations_MarriageR");
            viewString.Append("elationId = T3.MarriageRelations_MarriageRelationId) AS T4\r\n            LEFT OUT");
            viewString.Append("ER JOIN (\r\n            SELECT \r\n                Key(T.MarriageRelation).Marriage");
            viewString.Append("RelationId AS MarriageRelations_MarriageRelationId, \r\n                Key(T.Rela");
            viewString.Append("tionType).RelationTypeId AS MarriageRelations_RelationType, \r\n                Tr");
            viewString.Append("ue AS _from3\r\n            FROM GeneralModelContainer.FK_MarriageRelations_Relati");
            viewString.Append("onTypes AS T) AS T5\r\n            ON T4.MarriageRelations_MarriageRelationId = T5");
            viewString.Append(".MarriageRelations_MarriageRelationId\r\n    ) AS T6");
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelStoreContainer.MarriageRelations", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for GeneralModelStoreContainer.MarriageMapWitness
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView15()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelStoreContainer.MarriageMapWitness", @"
    SELECT VALUE -- Constructing MarriageMapWitness
        [GeneralModel.Store.MarriageMapWitness](T3.MarriageMapWitness_MarriageMapWitnessIndex, T3.MarriageMapWitness_MarriageId, T3.MarriageMapWitness_WitnessId)
    FROM (
        SELECT T1.MarriageMapWitness_MarriageMapWitnessIndex, T2.MarriageMapWitness_MarriageId, T1.MarriageMapWitness_WitnessId, T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.MarriageMapWitness).MarriageMapWitnessIndex AS MarriageMapWitness_MarriageMapWitnessIndex, 
                Key(T.Person).Person_id AS MarriageMapWitness_WitnessId, 
                True AS _from1
            FROM GeneralModelContainer.FK_MarriageMapWitness_Persons AS T) AS T1
            INNER JOIN (
            SELECT 
                Key(T.MarriageMapWitness).MarriageMapWitnessIndex AS MarriageMapWitness_MarriageMapWitnessIndex, 
                Key(T.Marriage).Marriage_Id AS MarriageMapWitness_MarriageId, 
                True AS _from0
            FROM GeneralModelContainer.FK_MarriageMapWitness_Marriages AS T) AS T2
            ON T1.MarriageMapWitness_MarriageMapWitnessIndex = T2.MarriageMapWitness_MarriageMapWitnessIndex
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.Marriages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView16()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3435);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Marriages\r\n        [GeneralModel.Marriage](T1");
            viewString.Append(".[Marriage.Marriage_Id], T1.Marriage_MaleCName, T1.Marriage_MaleSName, T1.Marria");
            viewString.Append("ge_MaleLocation, T1.Marriage_MaleInfo, T1.Marriage_FemaleCName, T1.Marriage_Fema");
            viewString.Append("leSName, T1.Marriage_FemaleLocation, T1.Marriage_FemaleInfo, T1.Marriage_Date, T");
            viewString.Append("1.Marriage_MarriageLocation, T1.Marriage_YearIntVal, T1.Marriage_MarriageCounty,");
            viewString.Append(" T1.Marriage_Source, T1.Marriage_Witness1, T1.Marriage_Witness2, T1.Marriage_Wit");
            viewString.Append("ness3, T1.Marriage_Witness4, T1.Marriage_DateAdded, T1.Marriage_DateLastEdit, T1");
            viewString.Append(".Marriage_UserId, T1.Marriage_OrigMaleSurname, T1.Marriage_OrigFemaleSurname, T1");
            viewString.Append(".Marriage_MaleOccupation, T1.Marriage_FemaleOccupation, T1.Marriage_FemaleIsKnow");
            viewString.Append("nWidow, T1.Marriage_MaleIsKnownWidower, T1.Marriage_IsBanns, T1.Marriage_IsLicen");
            viewString.Append("ce, T1.Marriage_MarriageLocationId, T1.Marriage_MaleLocationId, T1.Marriage_Fema");
            viewString.Append("leLocationId, T1.Marriage_MaleBirthYear, T1.Marriage_FemaleBirthYear, T1.Marriag");
            viewString.Append("e_UniqueRef, T1.Marriage_TotalEvents, T1.Marriage_EventPriority, T1.Marriage_Mal");
            viewString.Append("eId, T1.Marriage_FemaleId, T1.Marriage_IsDeleted, T1.Marriage_IsComposite)\r\n    ");
            viewString.Append("FROM (\r\n        SELECT \r\n            T.Marriage_Id AS [Marriage.Marriage_Id], \r\n");
            viewString.Append("            T.MaleCName AS Marriage_MaleCName, \r\n            T.MaleSName AS Marr");
            viewString.Append("iage_MaleSName, \r\n            T.MaleLocation AS Marriage_MaleLocation, \r\n       ");
            viewString.Append("     T.MaleInfo AS Marriage_MaleInfo, \r\n            T.FemaleCName AS Marriage_Fe");
            viewString.Append("maleCName, \r\n            T.FemaleSName AS Marriage_FemaleSName, \r\n            T.");
            viewString.Append("FemaleLocation AS Marriage_FemaleLocation, \r\n            T.FemaleInfo AS Marriag");
            viewString.Append("e_FemaleInfo, \r\n            T.Date AS Marriage_Date, \r\n            T.MarriageLoc");
            viewString.Append("ation AS Marriage_MarriageLocation, \r\n            T.YearIntVal AS Marriage_YearI");
            viewString.Append("ntVal, \r\n            T.MarriageCounty AS Marriage_MarriageCounty, \r\n            ");
            viewString.Append("T.Source AS Marriage_Source, \r\n            T.Witness1 AS Marriage_Witness1, \r\n  ");
            viewString.Append("          T.Witness2 AS Marriage_Witness2, \r\n            T.Witness3 AS Marriage_");
            viewString.Append("Witness3, \r\n            T.Witness4 AS Marriage_Witness4, \r\n            T.DateAdd");
            viewString.Append("ed AS Marriage_DateAdded, \r\n            T.DateLastEdit AS Marriage_DateLastEdit,");
            viewString.Append(" \r\n            T.UserId AS Marriage_UserId, \r\n            T.OrigMaleSurname AS M");
            viewString.Append("arriage_OrigMaleSurname, \r\n            T.OrigFemaleSurname AS Marriage_OrigFemal");
            viewString.Append("eSurname, \r\n            T.MaleOccupation AS Marriage_MaleOccupation, \r\n         ");
            viewString.Append("   T.FemaleOccupation AS Marriage_FemaleOccupation, \r\n            T.FemaleIsKnow");
            viewString.Append("nWidow AS Marriage_FemaleIsKnownWidow, \r\n            T.MaleIsKnownWidower AS Mar");
            viewString.Append("riage_MaleIsKnownWidower, \r\n            T.IsBanns AS Marriage_IsBanns, \r\n       ");
            viewString.Append("     T.IsLicence AS Marriage_IsLicence, \r\n            T.MarriageLocationId AS Ma");
            viewString.Append("rriage_MarriageLocationId, \r\n            T.MaleLocationId AS Marriage_MaleLocati");
            viewString.Append("onId, \r\n            T.FemaleLocationId AS Marriage_FemaleLocationId, \r\n         ");
            viewString.Append("   T.MaleBirthYear AS Marriage_MaleBirthYear, \r\n            T.FemaleBirthYear AS");
            viewString.Append(" Marriage_FemaleBirthYear, \r\n            T.UniqueRef AS Marriage_UniqueRef, \r\n  ");
            viewString.Append("          T.TotalEvents AS Marriage_TotalEvents, \r\n            T.EventPriority A");
            viewString.Append("S Marriage_EventPriority, \r\n            T.MaleId AS Marriage_MaleId, \r\n         ");
            viewString.Append("   T.FemaleId AS Marriage_FemaleId, \r\n            T.IsDeleted AS Marriage_IsDele");
            viewString.Append("ted, \r\n            T.IsComposite AS Marriage_IsComposite, \r\n            True AS ");
            viewString.Append("_from0\r\n        FROM GeneralModelStoreContainer.Marriages AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.Marriages", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.Parishs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView17()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.Parishs", @"
    SELECT VALUE -- Constructing Parishs
        [GeneralModel.Parish](T1.Parish_ParishId, T1.Parish_ParishName, T1.Parish_ParishRegistersDeposited, T1.Parish_ParishNotes, T1.Parish_ParentParish, T1.Parish_ParishStartYear, T1.Parish_ParishEndYear, T1.Parish_ParishCounty, T1.Parish_ParishX, T1.Parish_ParishY, T1.Parish_Distance)
    FROM (
        SELECT 
            T.ParishId AS Parish_ParishId, 
            T.ParishName AS Parish_ParishName, 
            T.ParishRegistersDeposited AS Parish_ParishRegistersDeposited, 
            T.ParishNotes AS Parish_ParishNotes, 
            T.ParentParish AS Parish_ParentParish, 
            T.ParishStartYear AS Parish_ParishStartYear, 
            T.ParishEndYear AS Parish_ParishEndYear, 
            T.ParishCounty AS Parish_ParishCounty, 
            T.ParishX AS Parish_ParishX, 
            T.ParishY AS Parish_ParishY, 
            T.Distance AS Parish_Distance, 
            True AS _from0
        FROM GeneralModelStoreContainer.Parishs AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.SourceMappingParishs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView18()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.SourceMappingParishs", @"
    SELECT VALUE -- Constructing SourceMappingParishs
        [GeneralModel.SourceMappingParish](T1.SourceMappingParish_SourceMappingParishsRowId, T1.SourceMappingParish_SourceMappingDateAdded, T1.SourceMappingParish_SourceMappingUser) WITH 
        RELATIONSHIP(CREATEREF(GeneralModelContainer.Parishs, ROW(T1.[FK_SourceMappingParishs_Parishs.Parish.ParishId]),[GeneralModel.Parish]),[GeneralModel.FK_SourceMappingParishs_Parishs],SourceMappingParish,Parish) 
        RELATIONSHIP(CREATEREF(GeneralModelContainer.Sources, ROW(T1.[FK_SourceMappingParishs_Sources.Source.SourceId]),[GeneralModel.Source]),[GeneralModel.FK_SourceMappingParishs_Sources],SourceMappingParish,Source) 
    FROM (
        SELECT 
            T.SourceMappingParishsRowId AS SourceMappingParish_SourceMappingParishsRowId, 
            T.SourceMappingDateAdded AS SourceMappingParish_SourceMappingDateAdded, 
            T.SourceMappingUser AS SourceMappingParish_SourceMappingUser, 
            True AS _from0, 
            T.SourceMappingParishId AS [FK_SourceMappingParishs_Parishs.Parish.ParishId], 
            T.SourceMappingSourceId AS [FK_SourceMappingParishs_Sources.Source.SourceId]
        FROM GeneralModelStoreContainer.SourceMappingParishs AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.SourceMappings
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView19()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.SourceMappings", "\r\n    SELECT VALUE -- Constructing SourceMappings\r\n        [GeneralModel.SourceMa" +
                    "pping](T1.SourceMapping_MappingId, T1.SourceMapping_UserId, T1.SourceMapping_Dat" +
                    "eAdded) WITH \r\n        RELATIONSHIP(CREATEREF(GeneralModelContainer.Marriages, R" +
                    "OW(T1.[FK_SourceMappings_Marriages.Marriage.Marriage_Id]),[GeneralModel.Marriage" +
                    "]),[GeneralModel.FK_SourceMappings_Marriages],SourceMapping,Marriage) \r\n        " +
                    "RELATIONSHIP(CREATEREF(GeneralModelContainer.Sources, ROW(T1.[FK_SourceMappings_" +
                    "Sources.Source.SourceId]),[GeneralModel.Source]),[GeneralModel.FK_SourceMappings" +
                    "_Sources],SourceMapping,Source) \r\n        RELATIONSHIP(CREATEREF(GeneralModelCon" +
                    "tainer.SourceTypes, ROW(T1.[FK_SourceMappings_SourceTypes.SourceType.SourceTypeI" +
                    "d]),[GeneralModel.SourceType]),[GeneralModel.FK_SourceMappings_SourceTypes],Sour" +
                    "ceMapping,SourceType) \r\n        RELATIONSHIP(CREATEREF(GeneralModelContainer.Fil" +
                    "es, ROW(T1.[FK_SourceMappings_Files.File.FiletId]),[GeneralModel.File]),[General" +
                    "Model.FK_SourceMappings_Files],SourceMapping,File) \r\n        RELATIONSHIP(CREATE" +
                    "REF(GeneralModelContainer.Persons, ROW(T1.[FK_SourceMappings_Persons.Person.Pers" +
                    "on_id]),[GeneralModel.Person]),[GeneralModel.FK_SourceMappings_Persons],SourceMa" +
                    "pping,Person) \r\n    FROM (\r\n        SELECT \r\n            T.MappingId AS SourceMa" +
                    "pping_MappingId, \r\n            T.UserId AS SourceMapping_UserId, \r\n            T" +
                    ".DateAdded AS SourceMapping_DateAdded, \r\n            True AS _from0, \r\n         " +
                    "   T.MarriageRecordId AS [FK_SourceMappings_Marriages.Marriage.Marriage_Id], \r\n " +
                    "           T.SourceId AS [FK_SourceMappings_Sources.Source.SourceId], \r\n        " +
                    "    T.MapTypeId AS [FK_SourceMappings_SourceTypes.SourceType.SourceTypeId], \r\n  " +
                    "          T.FileRecordId AS [FK_SourceMappings_Files.File.FiletId], \r\n          " +
                    "  T.PersonRecordId AS [FK_SourceMappings_Persons.Person.Person_id]\r\n        FROM" +
                    " GeneralModelStoreContainer.SourceMappings AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.Sources
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView20()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.Sources", @"
    SELECT VALUE -- Constructing Sources
        [GeneralModel.Source](T1.Source_SourceId, T1.Source_SourceRef, T1.Source_SourceDate, T1.Source_SourceDateTo, T1.Source_SourceDateStr, T1.Source_SourceDateStrTo, T1.Source_SourceDescription, T1.Source_OriginalLocation, T1.Source_IsCopyHeld, T1.Source_IsViewed, T1.Source_IsThackrayFound, T1.Source_DateAdded, T1.Source_UserId, T1.Source_SourceNotes, T1.Source_SourceFileCount)
    FROM (
        SELECT 
            T.SourceId AS Source_SourceId, 
            T.SourceRef AS Source_SourceRef, 
            T.SourceDate AS Source_SourceDate, 
            T.SourceDateTo AS Source_SourceDateTo, 
            T.SourceDateStr AS Source_SourceDateStr, 
            T.SourceDateStrTo AS Source_SourceDateStrTo, 
            T.SourceDescription AS Source_SourceDescription, 
            T.OriginalLocation AS Source_OriginalLocation, 
            T.IsCopyHeld AS Source_IsCopyHeld, 
            T.IsViewed AS Source_IsViewed, 
            T.IsThackrayFound AS Source_IsThackrayFound, 
            T.DateAdded AS Source_DateAdded, 
            T.UserId AS Source_UserId, 
            T.SourceNotes AS Source_SourceNotes, 
            T.SourceFileCount AS Source_SourceFileCount, 
            True AS _from0
        FROM GeneralModelStoreContainer.Sources AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.SourceTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView21()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.SourceTypes", @"
    SELECT VALUE -- Constructing SourceTypes
        [GeneralModel.SourceType](T1.SourceType_SourceTypeId, T1.SourceType_SourceTypeDesc, T1.SourceType_SourceDateAdded, T1.SourceType_SourceUserAdded, T1.SourceType_SourceTypeOrder)
    FROM (
        SELECT 
            T.SourceTypeId AS SourceType_SourceTypeId, 
            T.SourceTypeDesc AS SourceType_SourceTypeDesc, 
            T.SourceDateAdded AS SourceType_SourceDateAdded, 
            T.SourceUserAdded AS SourceType_SourceUserAdded, 
            T.SourceTypeOrder AS SourceType_SourceTypeOrder, 
            True AS _from0
        FROM GeneralModelStoreContainer.SourceTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.Relations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView22()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.Relations", @"
    SELECT VALUE -- Constructing Relations
        [GeneralModel.Relation](T1.Relation_RelationId, T1.Relation_UserId, T1.Relation_DateAdded) WITH 
        RELATIONSHIP(CREATEREF(GeneralModelContainer.RelationTypes, ROW(T1.[FK_Relations_RelationTypes.RelationType.RelationTypeId]),[GeneralModel.RelationType]),[GeneralModel.FK_Relations_RelationTypes],Relation,RelationType) 
        RELATIONSHIP(CREATEREF(GeneralModelContainer.Persons, ROW(T1.[FK_Relations_Persons.Person.Person_id]),[GeneralModel.Person]),[GeneralModel.FK_Relations_Persons],Relation,Person) 
        RELATIONSHIP(CREATEREF(GeneralModelContainer.Persons, ROW(T1.[FK_Relations_Persons1.Person.Person_id]),[GeneralModel.Person]),[GeneralModel.FK_Relations_Persons1],Relation,Person) 
    FROM (
        SELECT 
            T.RelationId AS Relation_RelationId, 
            T.UserId AS Relation_UserId, 
            T.DateAdded AS Relation_DateAdded, 
            True AS _from0, 
            T.RelationType AS [FK_Relations_RelationTypes.RelationType.RelationTypeId], 
            T.PersonA AS [FK_Relations_Persons.Person.Person_id], 
            T.PersonB AS [FK_Relations_Persons1.Person.Person_id]
        FROM GeneralModelStoreContainer.Relations AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.RelationTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView23()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.RelationTypes", @"
    SELECT VALUE -- Constructing RelationTypes
        [GeneralModel.RelationType](T1.RelationType_RelationTypeId, T1.RelationType_RelationName, T1.RelationType_UserId, T1.RelationType_DateAdded)
    FROM (
        SELECT 
            T.RelationTypeId AS RelationType_RelationTypeId, 
            T.RelationName AS RelationType_RelationName, 
            T.UserId AS RelationType_UserId, 
            T.DateAdded AS RelationType_DateAdded, 
            True AS _from0
        FROM GeneralModelStoreContainer.RelationTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.Files
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView24()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.Files", @"
    SELECT VALUE -- Constructing Files
        [GeneralModel.File](T1.File_FiletId, T1.File_FileDescription, T1.File_FileLocation, T1.File_FileContent, T1.File_FileEntryAdded, T1.File_FileDate, T1.File_FilerUserAdded, T1.File_FileThumbLocation)
    FROM (
        SELECT 
            T.FiletId AS File_FiletId, 
            T.FileDescription AS File_FileDescription, 
            T.FileLocation AS File_FileLocation, 
            T.FileContent AS File_FileContent, 
            T.FileEntryAdded AS File_FileEntryAdded, 
            T.FileDate AS File_FileDate, 
            T.FilerUserAdded AS File_FilerUserAdded, 
            T.FileThumbLocation AS File_FileThumbLocation, 
            True AS _from0
        FROM GeneralModelStoreContainer.Files AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.ParishTranscriptionDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView25()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.ParishTranscriptionDetails", @"
    SELECT VALUE -- Constructing ParishTranscriptionDetails
        [GeneralModel.ParishTranscriptionDetail](T1.ParishTranscriptionDetail_ParishTranscriptionId, T1.ParishTranscriptionDetail_ParishDataString) WITH 
        RELATIONSHIP(CREATEREF(GeneralModelContainer.Parishs, ROW(T1.[FK_ParishTranscriptionDetails_Parishs.Parish.ParishId]),[GeneralModel.Parish]),[GeneralModel.FK_ParishTranscriptionDetails_Parishs],ParishTranscriptionDetail,Parish) 
    FROM (
        SELECT 
            T.ParishTranscriptionId AS ParishTranscriptionDetail_ParishTranscriptionId, 
            T.ParishDataString AS ParishTranscriptionDetail_ParishDataString, 
            True AS _from0, 
            T.ParishId AS [FK_ParishTranscriptionDetails_Parishs.Parish.ParishId]
        FROM GeneralModelStoreContainer.ParishTranscriptionDetails AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.ParishRecords
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView26()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.ParishRecords", @"
    SELECT VALUE -- Constructing ParishRecords
        [GeneralModel.ParishRecord](T1.ParishRecord_ParishRecordsId, T1.ParishRecord_Year, T1.ParishRecord_RecordType, T1.ParishRecord_OriginalRegister, T1.ParishRecord_YearEnd) WITH 
        RELATIONSHIP(CREATEREF(GeneralModelContainer.ParishRecordSources, ROW(T1.[FK_ParishRecords_ParishRecordSource.ParishRecordSource.RecordTypeId]),[GeneralModel.ParishRecordSource]),[GeneralModel.FK_ParishRecords_ParishRecordSource],ParishRecord,ParishRecordSource) 
        RELATIONSHIP(CREATEREF(GeneralModelContainer.Parishs, ROW(T1.[FK_ParishRecords_Parishs.Parish.ParishId]),[GeneralModel.Parish]),[GeneralModel.FK_ParishRecords_Parishs],ParishRecord,Parish) 
    FROM (
        SELECT 
            T.ParishRecordsId AS ParishRecord_ParishRecordsId, 
            T.Year AS ParishRecord_Year, 
            T.RecordType AS ParishRecord_RecordType, 
            T.OriginalRegister AS ParishRecord_OriginalRegister, 
            T.YearEnd AS ParishRecord_YearEnd, 
            True AS _from0, 
            T.DataTypeId AS [FK_ParishRecords_ParishRecordSource.ParishRecordSource.RecordTypeId], 
            T.ParishId AS [FK_ParishRecords_Parishs.Parish.ParishId]
        FROM GeneralModelStoreContainer.ParishRecords AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.ParishRecordSources
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView27()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.ParishRecordSources", @"
    SELECT VALUE -- Constructing ParishRecordSources
        [GeneralModel.ParishRecordSource](T1.ParishRecordSource_RecordTypeId, T1.ParishRecordSource_RecordTypeName, T1.ParishRecordSource_RecordTypeDescription)
    FROM (
        SELECT 
            T.RecordTypeId AS ParishRecordSource_RecordTypeId, 
            T.RecordTypeName AS ParishRecordSource_RecordTypeName, 
            T.RecordTypeDescription AS ParishRecordSource_RecordTypeDescription, 
            True AS _from0
        FROM GeneralModelStoreContainer.ParishRecordSource AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.MissingRecords
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView28()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.MissingRecords", @"
    SELECT VALUE -- Constructing MissingRecords
        [GeneralModel.MissingRecord](T1.MissingRecord_MissingRecordId, T1.MissingRecord_DataTypeId, T1.MissingRecord_Year, T1.MissingRecord_RecordType, T1.MissingRecord_OriginalRegister, T1.MissingRecord_YearEnd) WITH 
        RELATIONSHIP(CREATEREF(GeneralModelContainer.Parishs, ROW(T1.[FK_MissingRecords_Parishs.Parish.ParishId]),[GeneralModel.Parish]),[GeneralModel.FK_MissingRecords_Parishs],MissingRecord,Parish) 
    FROM (
        SELECT 
            T.MissingRecordId AS MissingRecord_MissingRecordId, 
            T.DataTypeId AS MissingRecord_DataTypeId, 
            T.Year AS MissingRecord_Year, 
            T.RecordType AS MissingRecord_RecordType, 
            T.OriginalRegister AS MissingRecord_OriginalRegister, 
            T.YearEnd AS MissingRecord_YearEnd, 
            True AS _from0, 
            T.ParishId AS [FK_MissingRecords_Parishs.Parish.ParishId]
        FROM GeneralModelStoreContainer.MissingRecords AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.Persons
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView29()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3722);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Persons\r\n        [GeneralModel.Person](T1.[Pe");
            viewString.Append("rson.Person_id], T1.Person_MotherId, T1.Person_FatherId, T1.Person_IsMale, T1.Pe");
            viewString.Append("rson_ChristianName, T1.Person_Surname, T1.Person_BirthLocation, T1.Person_BirthD");
            viewString.Append("ateStr, T1.Person_BaptismDateStr, T1.Person_DeathDateStr, T1.Person_DeathLocatio");
            viewString.Append("n, T1.Person_FatherChristianName, T1.Person_FatherSurname, T1.Person_MotherChris");
            viewString.Append("tianName, T1.Person_MotherSurname, T1.Person_Notes, T1.Person_Source, T1.Person_");
            viewString.Append("BirthInt, T1.Person_BapInt, T1.Person_DeathInt, T1.Person_DeathCounty, T1.Person");
            viewString.Append("_BirthCounty, T1.Person_DateAdded, T1.Person_DateLastEdit, T1.Person_UserId, T1.");
            viewString.Append("Person_OrigSurname, T1.Person_OrigFatherSurname, T1.Person_OrigMotherSurname, T1");
            viewString.Append(".Person_Occupation, T1.Person_ReferenceLocation, T1.Person_ReferenceDateStr, T1.");
            viewString.Append("Person_ReferenceDateInt, T1.Person_SpouseName, T1.Person_SpouseSurname, T1.Perso");
            viewString.Append("n_FatherOccupation, T1.Person_BirthLocationId, T1.Person_DeathLocationId, T1.Per");
            viewString.Append("son_ReferenceLocationId, T1.Person_UniqueRef, T1.Person_TotalEvents, T1.Person_E");
            viewString.Append("ventPriority, T1.Person_EstBirthYearInt, T1.Person_EstDeathYearInt, T1.Person_Is");
            viewString.Append("EstBirth, T1.Person_IsEstDeath, T1.Person_IsDeleted)\r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.Person_id AS [Person.Person_id], \r\n            T.MotherId AS Pe");
            viewString.Append("rson_MotherId, \r\n            T.FatherId AS Person_FatherId, \r\n            T.IsMa");
            viewString.Append("le AS Person_IsMale, \r\n            T.ChristianName AS Person_ChristianName, \r\n  ");
            viewString.Append("          T.Surname AS Person_Surname, \r\n            T.BirthLocation AS Person_B");
            viewString.Append("irthLocation, \r\n            T.BirthDateStr AS Person_BirthDateStr, \r\n           ");
            viewString.Append(" T.BaptismDateStr AS Person_BaptismDateStr, \r\n            T.DeathDateStr AS Pers");
            viewString.Append("on_DeathDateStr, \r\n            T.DeathLocation AS Person_DeathLocation, \r\n      ");
            viewString.Append("      T.FatherChristianName AS Person_FatherChristianName, \r\n            T.Fathe");
            viewString.Append("rSurname AS Person_FatherSurname, \r\n            T.MotherChristianName AS Person_");
            viewString.Append("MotherChristianName, \r\n            T.MotherSurname AS Person_MotherSurname, \r\n  ");
            viewString.Append("          T.Notes AS Person_Notes, \r\n            T.Source AS Person_Source, \r\n  ");
            viewString.Append("          T.BirthInt AS Person_BirthInt, \r\n            T.BapInt AS Person_BapInt");
            viewString.Append(", \r\n            T.DeathInt AS Person_DeathInt, \r\n            T.DeathCounty AS Pe");
            viewString.Append("rson_DeathCounty, \r\n            T.BirthCounty AS Person_BirthCounty, \r\n         ");
            viewString.Append("   T.DateAdded AS Person_DateAdded, \r\n            T.DateLastEdit AS Person_DateL");
            viewString.Append("astEdit, \r\n            T.UserId AS Person_UserId, \r\n            T.OrigSurname AS");
            viewString.Append(" Person_OrigSurname, \r\n            T.OrigFatherSurname AS Person_OrigFatherSurna");
            viewString.Append("me, \r\n            T.OrigMotherSurname AS Person_OrigMotherSurname, \r\n           ");
            viewString.Append(" T.Occupation AS Person_Occupation, \r\n            T.ReferenceLocation AS Person_");
            viewString.Append("ReferenceLocation, \r\n            T.ReferenceDateStr AS Person_ReferenceDateStr, ");
            viewString.Append("\r\n            T.ReferenceDateInt AS Person_ReferenceDateInt, \r\n            T.Spo");
            viewString.Append("useName AS Person_SpouseName, \r\n            T.SpouseSurname AS Person_SpouseSurn");
            viewString.Append("ame, \r\n            T.FatherOccupation AS Person_FatherOccupation, \r\n            ");
            viewString.Append("T.BirthLocationId AS Person_BirthLocationId, \r\n            T.DeathLocationId AS ");
            viewString.Append("Person_DeathLocationId, \r\n            T.ReferenceLocationId AS Person_ReferenceL");
            viewString.Append("ocationId, \r\n            T.UniqueRef AS Person_UniqueRef, \r\n            T.TotalE");
            viewString.Append("vents AS Person_TotalEvents, \r\n            T.EventPriority AS Person_EventPriori");
            viewString.Append("ty, \r\n            T.EstBirthYearInt AS Person_EstBirthYearInt, \r\n            T.E");
            viewString.Append("stDeathYearInt AS Person_EstDeathYearInt, \r\n            T.IsEstBirth AS Person_I");
            viewString.Append("sEstBirth, \r\n            T.IsEstDeath AS Person_IsEstDeath, \r\n            T.IsDe");
            viewString.Append("leted AS Person_IsDeleted, \r\n            True AS _from0\r\n        FROM GeneralMod");
            viewString.Append("elStoreContainer.Persons AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.Persons", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.MarriageRelations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView30()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.MarriageRelations", "\r\n    SELECT VALUE -- Constructing MarriageRelations\r\n        [GeneralModel.Marri" +
                    "ageRelation](T1.MarriageRelation_MarriageRelationId, T1.MarriageRelation_UserId," +
                    " T1.MarriageRelation_DateAdded, T1.MarriageRelation_MarriageRelationNotes) WITH " +
                    "\r\n        RELATIONSHIP(CREATEREF(GeneralModelContainer.Marriages, ROW(T1.[FK_Mar" +
                    "riageRelations_Marriages.Marriage.Marriage_Id]),[GeneralModel.Marriage]),[Genera" +
                    "lModel.FK_MarriageRelations_Marriages],MarriageRelation,Marriage) \r\n        RELA" +
                    "TIONSHIP(CREATEREF(GeneralModelContainer.Marriages, ROW(T1.[FK_MarriageRelations" +
                    "_Marriages1.Marriage.Marriage_Id]),[GeneralModel.Marriage]),[GeneralModel.FK_Mar" +
                    "riageRelations_Marriages1],MarriageRelation,Marriage) \r\n        RELATIONSHIP(CRE" +
                    "ATEREF(GeneralModelContainer.RelationTypes, ROW(T1.[FK_MarriageRelations_Relatio" +
                    "nTypes.RelationType.RelationTypeId]),[GeneralModel.RelationType]),[GeneralModel." +
                    "FK_MarriageRelations_RelationTypes],MarriageRelation,RelationType) \r\n    FROM (\r" +
                    "\n        SELECT \r\n            T.MarriageRelationId AS MarriageRelation_MarriageR" +
                    "elationId, \r\n            T.UserId AS MarriageRelation_UserId, \r\n            T.Da" +
                    "teAdded AS MarriageRelation_DateAdded, \r\n            T.MarriageRelationNotes AS " +
                    "MarriageRelation_MarriageRelationNotes, \r\n            True AS _from0, \r\n        " +
                    "    T.MarriageA AS [FK_MarriageRelations_Marriages.Marriage.Marriage_Id], \r\n    " +
                    "        T.MarriageB AS [FK_MarriageRelations_Marriages1.Marriage.Marriage_Id], \r" +
                    "\n            T.RelationType AS [FK_MarriageRelations_RelationTypes.RelationType." +
                    "RelationTypeId]\r\n        FROM GeneralModelStoreContainer.MarriageRelations AS T\r" +
                    "\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.MarriageMapWitnesses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView31()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.MarriageMapWitnesses", @"
    SELECT VALUE -- Constructing MarriageMapWitnesses
        [GeneralModel.MarriageMapWitness](T1.MarriageMapWitness_MarriageMapWitnessIndex) WITH 
        RELATIONSHIP(CREATEREF(GeneralModelContainer.Marriages, ROW(T1.[FK_MarriageMapWitness_Marriages.Marriage.Marriage_Id]),[GeneralModel.Marriage]),[GeneralModel.FK_MarriageMapWitness_Marriages],MarriageMapWitness,Marriage) 
        RELATIONSHIP(CREATEREF(GeneralModelContainer.Persons, ROW(T1.[FK_MarriageMapWitness_Persons.Person.Person_id]),[GeneralModel.Person]),[GeneralModel.FK_MarriageMapWitness_Persons],MarriageMapWitness,Person) 
    FROM (
        SELECT 
            T.MarriageMapWitnessIndex AS MarriageMapWitness_MarriageMapWitnessIndex, 
            True AS _from0, 
            T.MarriageId AS [FK_MarriageMapWitness_Marriages.Marriage.Marriage_Id], 
            T.WitnessId AS [FK_MarriageMapWitness_Persons.Person.Person_id]
        FROM GeneralModelStoreContainer.MarriageMapWitness AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.FK_SourceMappings_Marriages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView32()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.FK_SourceMappings_Marriages", @"
    SELECT VALUE -- Constructing FK_SourceMappings_Marriages
        [GeneralModel.FK_SourceMappings_Marriages](T3.[FK_SourceMappings_Marriages.Marriage], T3.[FK_SourceMappings_Marriages.SourceMapping])
    FROM (
        SELECT -- Constructing Marriage
            CreateRef(GeneralModelContainer.Marriages, row(T2.[FK_SourceMappings_Marriages.Marriage.Marriage_Id]),[GeneralModel.Marriage]) AS [FK_SourceMappings_Marriages.Marriage], 
            T2.[FK_SourceMappings_Marriages.SourceMapping]
        FROM (
            SELECT -- Constructing SourceMapping
                CreateRef(GeneralModelContainer.SourceMappings, row(T1.[FK_SourceMappings_Marriages.SourceMapping.MappingId]),[GeneralModel.SourceMapping]) AS [FK_SourceMappings_Marriages.SourceMapping], 
                T1.[FK_SourceMappings_Marriages.Marriage.Marriage_Id]
            FROM (
                SELECT 
                    T.MarriageRecordId AS [FK_SourceMappings_Marriages.Marriage.Marriage_Id], 
                    T.MappingId AS [FK_SourceMappings_Marriages.SourceMapping.MappingId], 
                    True AS _from0
                FROM GeneralModelStoreContainer.SourceMappings AS T
                WHERE T.MarriageRecordId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.FK_SourceMappingParishs_Parishs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView33()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.FK_SourceMappingParishs_Parishs", @"
    SELECT VALUE -- Constructing FK_SourceMappingParishs_Parishs
        [GeneralModel.FK_SourceMappingParishs_Parishs](T3.[FK_SourceMappingParishs_Parishs.Parish], T3.[FK_SourceMappingParishs_Parishs.SourceMappingParish])
    FROM (
        SELECT -- Constructing Parish
            CreateRef(GeneralModelContainer.Parishs, row(T2.[FK_SourceMappingParishs_Parishs.Parish.ParishId]),[GeneralModel.Parish]) AS [FK_SourceMappingParishs_Parishs.Parish], 
            T2.[FK_SourceMappingParishs_Parishs.SourceMappingParish]
        FROM (
            SELECT -- Constructing SourceMappingParish
                CreateRef(GeneralModelContainer.SourceMappingParishs, row(T1.[FK_SourceMappingParishs_Parishs.SourceMappingParish.SourceMappingParishsRowId]),[GeneralModel.SourceMappingParish]) AS [FK_SourceMappingParishs_Parishs.SourceMappingParish], 
                T1.[FK_SourceMappingParishs_Parishs.Parish.ParishId]
            FROM (
                SELECT 
                    T.SourceMappingParishId AS [FK_SourceMappingParishs_Parishs.Parish.ParishId], 
                    T.SourceMappingParishsRowId AS [FK_SourceMappingParishs_Parishs.SourceMappingParish.SourceMappingParishsRowId], 
                    True AS _from0
                FROM GeneralModelStoreContainer.SourceMappingParishs AS T
                WHERE T.SourceMappingParishId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.FK_SourceMappingParishs_Sources
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView34()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.FK_SourceMappingParishs_Sources", @"
    SELECT VALUE -- Constructing FK_SourceMappingParishs_Sources
        [GeneralModel.FK_SourceMappingParishs_Sources](T3.[FK_SourceMappingParishs_Sources.Source], T3.[FK_SourceMappingParishs_Sources.SourceMappingParish])
    FROM (
        SELECT -- Constructing Source
            CreateRef(GeneralModelContainer.Sources, row(T2.[FK_SourceMappingParishs_Sources.Source.SourceId]),[GeneralModel.Source]) AS [FK_SourceMappingParishs_Sources.Source], 
            T2.[FK_SourceMappingParishs_Sources.SourceMappingParish]
        FROM (
            SELECT -- Constructing SourceMappingParish
                CreateRef(GeneralModelContainer.SourceMappingParishs, row(T1.[FK_SourceMappingParishs_Sources.SourceMappingParish.SourceMappingParishsRowId]),[GeneralModel.SourceMappingParish]) AS [FK_SourceMappingParishs_Sources.SourceMappingParish], 
                T1.[FK_SourceMappingParishs_Sources.Source.SourceId]
            FROM (
                SELECT 
                    T.SourceMappingSourceId AS [FK_SourceMappingParishs_Sources.Source.SourceId], 
                    T.SourceMappingParishsRowId AS [FK_SourceMappingParishs_Sources.SourceMappingParish.SourceMappingParishsRowId], 
                    True AS _from0
                FROM GeneralModelStoreContainer.SourceMappingParishs AS T
                WHERE T.SourceMappingSourceId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.FK_SourceMappings_Sources
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView35()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.FK_SourceMappings_Sources", @"
    SELECT VALUE -- Constructing FK_SourceMappings_Sources
        [GeneralModel.FK_SourceMappings_Sources](T3.[FK_SourceMappings_Sources.Source], T3.[FK_SourceMappings_Sources.SourceMapping])
    FROM (
        SELECT -- Constructing Source
            CreateRef(GeneralModelContainer.Sources, row(T2.[FK_SourceMappings_Sources.Source.SourceId]),[GeneralModel.Source]) AS [FK_SourceMappings_Sources.Source], 
            T2.[FK_SourceMappings_Sources.SourceMapping]
        FROM (
            SELECT -- Constructing SourceMapping
                CreateRef(GeneralModelContainer.SourceMappings, row(T1.[FK_SourceMappings_Sources.SourceMapping.MappingId]),[GeneralModel.SourceMapping]) AS [FK_SourceMappings_Sources.SourceMapping], 
                T1.[FK_SourceMappings_Sources.Source.SourceId]
            FROM (
                SELECT 
                    T.SourceId AS [FK_SourceMappings_Sources.Source.SourceId], 
                    T.MappingId AS [FK_SourceMappings_Sources.SourceMapping.MappingId], 
                    True AS _from0
                FROM GeneralModelStoreContainer.SourceMappings AS T
                WHERE T.SourceId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.FK_SourceMappings_SourceTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView36()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.FK_SourceMappings_SourceTypes", @"
    SELECT VALUE -- Constructing FK_SourceMappings_SourceTypes
        [GeneralModel.FK_SourceMappings_SourceTypes](T3.[FK_SourceMappings_SourceTypes.SourceType], T3.[FK_SourceMappings_SourceTypes.SourceMapping])
    FROM (
        SELECT -- Constructing SourceType
            CreateRef(GeneralModelContainer.SourceTypes, row(T2.[FK_SourceMappings_SourceTypes.SourceType.SourceTypeId]),[GeneralModel.SourceType]) AS [FK_SourceMappings_SourceTypes.SourceType], 
            T2.[FK_SourceMappings_SourceTypes.SourceMapping]
        FROM (
            SELECT -- Constructing SourceMapping
                CreateRef(GeneralModelContainer.SourceMappings, row(T1.[FK_SourceMappings_SourceTypes.SourceMapping.MappingId]),[GeneralModel.SourceMapping]) AS [FK_SourceMappings_SourceTypes.SourceMapping], 
                T1.[FK_SourceMappings_SourceTypes.SourceType.SourceTypeId]
            FROM (
                SELECT 
                    T.MapTypeId AS [FK_SourceMappings_SourceTypes.SourceType.SourceTypeId], 
                    T.MappingId AS [FK_SourceMappings_SourceTypes.SourceMapping.MappingId], 
                    True AS _from0
                FROM GeneralModelStoreContainer.SourceMappings AS T
                WHERE T.MapTypeId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.FK_Relations_RelationTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView37()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.FK_Relations_RelationTypes", @"
    SELECT VALUE -- Constructing FK_Relations_RelationTypes
        [GeneralModel.FK_Relations_RelationTypes](T3.[FK_Relations_RelationTypes.RelationType], T3.[FK_Relations_RelationTypes.Relation])
    FROM (
        SELECT -- Constructing RelationType
            CreateRef(GeneralModelContainer.RelationTypes, row(T2.[FK_Relations_RelationTypes.RelationType.RelationTypeId]),[GeneralModel.RelationType]) AS [FK_Relations_RelationTypes.RelationType], 
            T2.[FK_Relations_RelationTypes.Relation]
        FROM (
            SELECT -- Constructing Relation
                CreateRef(GeneralModelContainer.Relations, row(T1.[FK_Relations_RelationTypes.Relation.RelationId]),[GeneralModel.Relation]) AS [FK_Relations_RelationTypes.Relation], 
                T1.[FK_Relations_RelationTypes.RelationType.RelationTypeId]
            FROM (
                SELECT 
                    T.RelationType AS [FK_Relations_RelationTypes.RelationType.RelationTypeId], 
                    T.RelationId AS [FK_Relations_RelationTypes.Relation.RelationId], 
                    True AS _from0
                FROM GeneralModelStoreContainer.Relations AS T
                WHERE T.RelationType IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.FK_SourceMappings_Files
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView38()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.FK_SourceMappings_Files", @"
    SELECT VALUE -- Constructing FK_SourceMappings_Files
        [GeneralModel.FK_SourceMappings_Files](T3.[FK_SourceMappings_Files.File], T3.[FK_SourceMappings_Files.SourceMapping])
    FROM (
        SELECT -- Constructing File
            CreateRef(GeneralModelContainer.Files, row(T2.[FK_SourceMappings_Files.File.FiletId]),[GeneralModel.File]) AS [FK_SourceMappings_Files.File], 
            T2.[FK_SourceMappings_Files.SourceMapping]
        FROM (
            SELECT -- Constructing SourceMapping
                CreateRef(GeneralModelContainer.SourceMappings, row(T1.[FK_SourceMappings_Files.SourceMapping.MappingId]),[GeneralModel.SourceMapping]) AS [FK_SourceMappings_Files.SourceMapping], 
                T1.[FK_SourceMappings_Files.File.FiletId]
            FROM (
                SELECT 
                    T.FileRecordId AS [FK_SourceMappings_Files.File.FiletId], 
                    T.MappingId AS [FK_SourceMappings_Files.SourceMapping.MappingId], 
                    True AS _from0
                FROM GeneralModelStoreContainer.SourceMappings AS T
                WHERE T.FileRecordId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.FK_ParishTranscriptionDetails_Parishs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView39()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.FK_ParishTranscriptionDetails_Parishs", "\r\n    SELECT VALUE -- Constructing FK_ParishTranscriptionDetails_Parishs\r\n       " +
                    " [GeneralModel.FK_ParishTranscriptionDetails_Parishs](T3.[FK_ParishTranscription" +
                    "Details_Parishs.Parish], T3.[FK_ParishTranscriptionDetails_Parishs.ParishTranscr" +
                    "iptionDetail])\r\n    FROM (\r\n        SELECT -- Constructing Parish\r\n            C" +
                    "reateRef(GeneralModelContainer.Parishs, row(T2.[FK_ParishTranscriptionDetails_Pa" +
                    "rishs.Parish.ParishId]),[GeneralModel.Parish]) AS [FK_ParishTranscriptionDetails" +
                    "_Parishs.Parish], \r\n            T2.[FK_ParishTranscriptionDetails_Parishs.Parish" +
                    "TranscriptionDetail]\r\n        FROM (\r\n            SELECT -- Constructing ParishT" +
                    "ranscriptionDetail\r\n                CreateRef(GeneralModelContainer.ParishTransc" +
                    "riptionDetails, row(T1.[FK_ParishTranscriptionDetails_Parishs.ParishTranscriptio" +
                    "nDetail.ParishTranscriptionId]),[GeneralModel.ParishTranscriptionDetail]) AS [FK" +
                    "_ParishTranscriptionDetails_Parishs.ParishTranscriptionDetail], \r\n              " +
                    "  T1.[FK_ParishTranscriptionDetails_Parishs.Parish.ParishId]\r\n            FROM (" +
                    "\r\n                SELECT \r\n                    T.ParishId AS [FK_ParishTranscrip" +
                    "tionDetails_Parishs.Parish.ParishId], \r\n                    T.ParishTranscriptio" +
                    "nId AS [FK_ParishTranscriptionDetails_Parishs.ParishTranscriptionDetail.ParishTr" +
                    "anscriptionId], \r\n                    True AS _from0\r\n                FROM Gener" +
                    "alModelStoreContainer.ParishTranscriptionDetails AS T\r\n                WHERE T.P" +
                    "arishId IS NOT NULL\r\n            ) AS T1\r\n        ) AS T2\r\n    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.FK_ParishRecords_ParishRecordSource
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView40()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.FK_ParishRecords_ParishRecordSource", @"
    SELECT VALUE -- Constructing FK_ParishRecords_ParishRecordSource
        [GeneralModel.FK_ParishRecords_ParishRecordSource](T3.[FK_ParishRecords_ParishRecordSource.ParishRecordSource], T3.[FK_ParishRecords_ParishRecordSource.ParishRecord])
    FROM (
        SELECT -- Constructing ParishRecordSource
            CreateRef(GeneralModelContainer.ParishRecordSources, row(T2.[FK_ParishRecords_ParishRecordSource.ParishRecordSource.RecordTypeId]),[GeneralModel.ParishRecordSource]) AS [FK_ParishRecords_ParishRecordSource.ParishRecordSource], 
            T2.[FK_ParishRecords_ParishRecordSource.ParishRecord]
        FROM (
            SELECT -- Constructing ParishRecord
                CreateRef(GeneralModelContainer.ParishRecords, row(T1.[FK_ParishRecords_ParishRecordSource.ParishRecord.ParishRecordsId]),[GeneralModel.ParishRecord]) AS [FK_ParishRecords_ParishRecordSource.ParishRecord], 
                T1.[FK_ParishRecords_ParishRecordSource.ParishRecordSource.RecordTypeId]
            FROM (
                SELECT 
                    T.DataTypeId AS [FK_ParishRecords_ParishRecordSource.ParishRecordSource.RecordTypeId], 
                    T.ParishRecordsId AS [FK_ParishRecords_ParishRecordSource.ParishRecord.ParishRecordsId], 
                    True AS _from0
                FROM GeneralModelStoreContainer.ParishRecords AS T
                WHERE T.DataTypeId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.FK_ParishRecords_Parishs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView41()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.FK_ParishRecords_Parishs", @"
    SELECT VALUE -- Constructing FK_ParishRecords_Parishs
        [GeneralModel.FK_ParishRecords_Parishs](T3.[FK_ParishRecords_Parishs.Parish], T3.[FK_ParishRecords_Parishs.ParishRecord])
    FROM (
        SELECT -- Constructing Parish
            CreateRef(GeneralModelContainer.Parishs, row(T2.[FK_ParishRecords_Parishs.Parish.ParishId]),[GeneralModel.Parish]) AS [FK_ParishRecords_Parishs.Parish], 
            T2.[FK_ParishRecords_Parishs.ParishRecord]
        FROM (
            SELECT -- Constructing ParishRecord
                CreateRef(GeneralModelContainer.ParishRecords, row(T1.[FK_ParishRecords_Parishs.ParishRecord.ParishRecordsId]),[GeneralModel.ParishRecord]) AS [FK_ParishRecords_Parishs.ParishRecord], 
                T1.[FK_ParishRecords_Parishs.Parish.ParishId]
            FROM (
                SELECT 
                    T.ParishId AS [FK_ParishRecords_Parishs.Parish.ParishId], 
                    T.ParishRecordsId AS [FK_ParishRecords_Parishs.ParishRecord.ParishRecordsId], 
                    True AS _from0
                FROM GeneralModelStoreContainer.ParishRecords AS T
                WHERE T.ParishId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.FK_MissingRecords_Parishs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView42()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.FK_MissingRecords_Parishs", @"
    SELECT VALUE -- Constructing FK_MissingRecords_Parishs
        [GeneralModel.FK_MissingRecords_Parishs](T3.[FK_MissingRecords_Parishs.Parish], T3.[FK_MissingRecords_Parishs.MissingRecord])
    FROM (
        SELECT -- Constructing Parish
            CreateRef(GeneralModelContainer.Parishs, row(T2.[FK_MissingRecords_Parishs.Parish.ParishId]),[GeneralModel.Parish]) AS [FK_MissingRecords_Parishs.Parish], 
            T2.[FK_MissingRecords_Parishs.MissingRecord]
        FROM (
            SELECT -- Constructing MissingRecord
                CreateRef(GeneralModelContainer.MissingRecords, row(T1.[FK_MissingRecords_Parishs.MissingRecord.MissingRecordId]),[GeneralModel.MissingRecord]) AS [FK_MissingRecords_Parishs.MissingRecord], 
                T1.[FK_MissingRecords_Parishs.Parish.ParishId]
            FROM (
                SELECT 
                    T.ParishId AS [FK_MissingRecords_Parishs.Parish.ParishId], 
                    T.MissingRecordId AS [FK_MissingRecords_Parishs.MissingRecord.MissingRecordId], 
                    True AS _from0
                FROM GeneralModelStoreContainer.MissingRecords AS T
                WHERE T.ParishId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.FK_Relations_Persons
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView43()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.FK_Relations_Persons", @"
    SELECT VALUE -- Constructing FK_Relations_Persons
        [GeneralModel.FK_Relations_Persons](T3.[FK_Relations_Persons.Person], T3.[FK_Relations_Persons.Relation])
    FROM (
        SELECT -- Constructing Person
            CreateRef(GeneralModelContainer.Persons, row(T2.[FK_Relations_Persons.Person.Person_id]),[GeneralModel.Person]) AS [FK_Relations_Persons.Person], 
            T2.[FK_Relations_Persons.Relation]
        FROM (
            SELECT -- Constructing Relation
                CreateRef(GeneralModelContainer.Relations, row(T1.[FK_Relations_Persons.Relation.RelationId]),[GeneralModel.Relation]) AS [FK_Relations_Persons.Relation], 
                T1.[FK_Relations_Persons.Person.Person_id]
            FROM (
                SELECT 
                    T.PersonA AS [FK_Relations_Persons.Person.Person_id], 
                    T.RelationId AS [FK_Relations_Persons.Relation.RelationId], 
                    True AS _from0
                FROM GeneralModelStoreContainer.Relations AS T
                WHERE T.PersonA IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.FK_Relations_Persons1
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView44()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.FK_Relations_Persons1", @"
    SELECT VALUE -- Constructing FK_Relations_Persons1
        [GeneralModel.FK_Relations_Persons1](T3.[FK_Relations_Persons1.Person], T3.[FK_Relations_Persons1.Relation])
    FROM (
        SELECT -- Constructing Person
            CreateRef(GeneralModelContainer.Persons, row(T2.[FK_Relations_Persons1.Person.Person_id]),[GeneralModel.Person]) AS [FK_Relations_Persons1.Person], 
            T2.[FK_Relations_Persons1.Relation]
        FROM (
            SELECT -- Constructing Relation
                CreateRef(GeneralModelContainer.Relations, row(T1.[FK_Relations_Persons1.Relation.RelationId]),[GeneralModel.Relation]) AS [FK_Relations_Persons1.Relation], 
                T1.[FK_Relations_Persons1.Person.Person_id]
            FROM (
                SELECT 
                    T.PersonB AS [FK_Relations_Persons1.Person.Person_id], 
                    T.RelationId AS [FK_Relations_Persons1.Relation.RelationId], 
                    True AS _from0
                FROM GeneralModelStoreContainer.Relations AS T
                WHERE T.PersonB IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.FK_SourceMappings_Persons
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView45()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.FK_SourceMappings_Persons", @"
    SELECT VALUE -- Constructing FK_SourceMappings_Persons
        [GeneralModel.FK_SourceMappings_Persons](T3.[FK_SourceMappings_Persons.Person], T3.[FK_SourceMappings_Persons.SourceMapping])
    FROM (
        SELECT -- Constructing Person
            CreateRef(GeneralModelContainer.Persons, row(T2.[FK_SourceMappings_Persons.Person.Person_id]),[GeneralModel.Person]) AS [FK_SourceMappings_Persons.Person], 
            T2.[FK_SourceMappings_Persons.SourceMapping]
        FROM (
            SELECT -- Constructing SourceMapping
                CreateRef(GeneralModelContainer.SourceMappings, row(T1.[FK_SourceMappings_Persons.SourceMapping.MappingId]),[GeneralModel.SourceMapping]) AS [FK_SourceMappings_Persons.SourceMapping], 
                T1.[FK_SourceMappings_Persons.Person.Person_id]
            FROM (
                SELECT 
                    T.PersonRecordId AS [FK_SourceMappings_Persons.Person.Person_id], 
                    T.MappingId AS [FK_SourceMappings_Persons.SourceMapping.MappingId], 
                    True AS _from0
                FROM GeneralModelStoreContainer.SourceMappings AS T
                WHERE T.PersonRecordId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.FK_MarriageRelations_Marriages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView46()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.FK_MarriageRelations_Marriages", @"
    SELECT VALUE -- Constructing FK_MarriageRelations_Marriages
        [GeneralModel.FK_MarriageRelations_Marriages](T3.[FK_MarriageRelations_Marriages.Marriage], T3.[FK_MarriageRelations_Marriages.MarriageRelation])
    FROM (
        SELECT -- Constructing Marriage
            CreateRef(GeneralModelContainer.Marriages, row(T2.[FK_MarriageRelations_Marriages.Marriage.Marriage_Id]),[GeneralModel.Marriage]) AS [FK_MarriageRelations_Marriages.Marriage], 
            T2.[FK_MarriageRelations_Marriages.MarriageRelation]
        FROM (
            SELECT -- Constructing MarriageRelation
                CreateRef(GeneralModelContainer.MarriageRelations, row(T1.[FK_MarriageRelations_Marriages.MarriageRelation.MarriageRelationId]),[GeneralModel.MarriageRelation]) AS [FK_MarriageRelations_Marriages.MarriageRelation], 
                T1.[FK_MarriageRelations_Marriages.Marriage.Marriage_Id]
            FROM (
                SELECT 
                    T.MarriageA AS [FK_MarriageRelations_Marriages.Marriage.Marriage_Id], 
                    T.MarriageRelationId AS [FK_MarriageRelations_Marriages.MarriageRelation.MarriageRelationId], 
                    True AS _from0
                FROM GeneralModelStoreContainer.MarriageRelations AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.FK_MarriageRelations_Marriages1
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView47()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.FK_MarriageRelations_Marriages1", @"
    SELECT VALUE -- Constructing FK_MarriageRelations_Marriages1
        [GeneralModel.FK_MarriageRelations_Marriages1](T3.[FK_MarriageRelations_Marriages1.Marriage], T3.[FK_MarriageRelations_Marriages1.MarriageRelation])
    FROM (
        SELECT -- Constructing Marriage
            CreateRef(GeneralModelContainer.Marriages, row(T2.[FK_MarriageRelations_Marriages1.Marriage.Marriage_Id]),[GeneralModel.Marriage]) AS [FK_MarriageRelations_Marriages1.Marriage], 
            T2.[FK_MarriageRelations_Marriages1.MarriageRelation]
        FROM (
            SELECT -- Constructing MarriageRelation
                CreateRef(GeneralModelContainer.MarriageRelations, row(T1.[FK_MarriageRelations_Marriages1.MarriageRelation.MarriageRelationId]),[GeneralModel.MarriageRelation]) AS [FK_MarriageRelations_Marriages1.MarriageRelation], 
                T1.[FK_MarriageRelations_Marriages1.Marriage.Marriage_Id]
            FROM (
                SELECT 
                    T.MarriageB AS [FK_MarriageRelations_Marriages1.Marriage.Marriage_Id], 
                    T.MarriageRelationId AS [FK_MarriageRelations_Marriages1.MarriageRelation.MarriageRelationId], 
                    True AS _from0
                FROM GeneralModelStoreContainer.MarriageRelations AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.FK_MarriageRelations_RelationTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView48()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.FK_MarriageRelations_RelationTypes", @"
    SELECT VALUE -- Constructing FK_MarriageRelations_RelationTypes
        [GeneralModel.FK_MarriageRelations_RelationTypes](T3.[FK_MarriageRelations_RelationTypes.RelationType], T3.[FK_MarriageRelations_RelationTypes.MarriageRelation])
    FROM (
        SELECT -- Constructing RelationType
            CreateRef(GeneralModelContainer.RelationTypes, row(T2.[FK_MarriageRelations_RelationTypes.RelationType.RelationTypeId]),[GeneralModel.RelationType]) AS [FK_MarriageRelations_RelationTypes.RelationType], 
            T2.[FK_MarriageRelations_RelationTypes.MarriageRelation]
        FROM (
            SELECT -- Constructing MarriageRelation
                CreateRef(GeneralModelContainer.MarriageRelations, row(T1.[FK_MarriageRelations_RelationTypes.MarriageRelation.MarriageRelationId]),[GeneralModel.MarriageRelation]) AS [FK_MarriageRelations_RelationTypes.MarriageRelation], 
                T1.[FK_MarriageRelations_RelationTypes.RelationType.RelationTypeId]
            FROM (
                SELECT 
                    T.RelationType AS [FK_MarriageRelations_RelationTypes.RelationType.RelationTypeId], 
                    T.MarriageRelationId AS [FK_MarriageRelations_RelationTypes.MarriageRelation.MarriageRelationId], 
                    True AS _from0
                FROM GeneralModelStoreContainer.MarriageRelations AS T
                WHERE T.RelationType IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.FK_MarriageMapWitness_Marriages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView49()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.FK_MarriageMapWitness_Marriages", @"
    SELECT VALUE -- Constructing FK_MarriageMapWitness_Marriages
        [GeneralModel.FK_MarriageMapWitness_Marriages](T3.[FK_MarriageMapWitness_Marriages.Marriage], T3.[FK_MarriageMapWitness_Marriages.MarriageMapWitness])
    FROM (
        SELECT -- Constructing Marriage
            CreateRef(GeneralModelContainer.Marriages, row(T2.[FK_MarriageMapWitness_Marriages.Marriage.Marriage_Id]),[GeneralModel.Marriage]) AS [FK_MarriageMapWitness_Marriages.Marriage], 
            T2.[FK_MarriageMapWitness_Marriages.MarriageMapWitness]
        FROM (
            SELECT -- Constructing MarriageMapWitness
                CreateRef(GeneralModelContainer.MarriageMapWitnesses, row(T1.[FK_MarriageMapWitness_Marriages.MarriageMapWitness.MarriageMapWitnessIndex]),[GeneralModel.MarriageMapWitness]) AS [FK_MarriageMapWitness_Marriages.MarriageMapWitness], 
                T1.[FK_MarriageMapWitness_Marriages.Marriage.Marriage_Id]
            FROM (
                SELECT 
                    T.MarriageId AS [FK_MarriageMapWitness_Marriages.Marriage.Marriage_Id], 
                    T.MarriageMapWitnessIndex AS [FK_MarriageMapWitness_Marriages.MarriageMapWitness.MarriageMapWitnessIndex], 
                    True AS _from0
                FROM GeneralModelStoreContainer.MarriageMapWitness AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.FK_MarriageMapWitness_Persons
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView50()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.FK_MarriageMapWitness_Persons", @"
    SELECT VALUE -- Constructing FK_MarriageMapWitness_Persons
        [GeneralModel.FK_MarriageMapWitness_Persons](T3.[FK_MarriageMapWitness_Persons.Person], T3.[FK_MarriageMapWitness_Persons.MarriageMapWitness])
    FROM (
        SELECT -- Constructing Person
            CreateRef(GeneralModelContainer.Persons, row(T2.[FK_MarriageMapWitness_Persons.Person.Person_id]),[GeneralModel.Person]) AS [FK_MarriageMapWitness_Persons.Person], 
            T2.[FK_MarriageMapWitness_Persons.MarriageMapWitness]
        FROM (
            SELECT -- Constructing MarriageMapWitness
                CreateRef(GeneralModelContainer.MarriageMapWitnesses, row(T1.[FK_MarriageMapWitness_Persons.MarriageMapWitness.MarriageMapWitnessIndex]),[GeneralModel.MarriageMapWitness]) AS [FK_MarriageMapWitness_Persons.MarriageMapWitness], 
                T1.[FK_MarriageMapWitness_Persons.Person.Person_id]
            FROM (
                SELECT 
                    T.WitnessId AS [FK_MarriageMapWitness_Persons.Person.Person_id], 
                    T.MarriageMapWitnessIndex AS [FK_MarriageMapWitness_Persons.MarriageMapWitness.MarriageMapWitnessIndex], 
                    True AS _from0
                FROM GeneralModelStoreContainer.MarriageMapWitness AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for GeneralModelStoreContainer.LocationDictionary
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView51()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelStoreContainer.LocationDictionary", @"
    SELECT VALUE -- Constructing LocationDictionary
        [GeneralModel.Store.LocationDictionary](T1.LocationDictionary_LocationId, T1.LocationDictionary_LocationName, T1.LocationDictionary_LocationCounty, T1.LocationDictionary_ParishId)
    FROM (
        SELECT 
            T.LocationId AS LocationDictionary_LocationId, 
            T.LocationName AS LocationDictionary_LocationName, 
            T.LocationCounty AS LocationDictionary_LocationCounty, 
            T.ParishId AS LocationDictionary_ParishId, 
            True AS _from0
        FROM GeneralModelContainer.LocationDictionaries AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.LocationDictionaries
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView52()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.LocationDictionaries", @"
    SELECT VALUE -- Constructing LocationDictionaries
        [GeneralModel.LocationDictionary](T1.LocationDictionary_LocationId, T1.LocationDictionary_LocationName, T1.LocationDictionary_LocationCounty, T1.LocationDictionary_ParishId)
    FROM (
        SELECT 
            T.LocationId AS LocationDictionary_LocationId, 
            T.LocationName AS LocationDictionary_LocationName, 
            T.LocationCounty AS LocationDictionary_LocationCounty, 
            T.ParishId AS LocationDictionary_ParishId, 
            True AS _from0
        FROM GeneralModelStoreContainer.LocationDictionary AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelStoreContainer.CountyDictionary
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView53()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelStoreContainer.CountyDictionary", @"
    SELECT VALUE -- Constructing CountyDictionary
        [GeneralModel.Store.CountyDictionary](T1.CountyDictionary_dictId, T1.CountyDictionary_dictPlace, T1.CountyDictionary_dictCounty)
    FROM (
        SELECT 
            T.dictId AS CountyDictionary_dictId, 
            T.dictPlace AS CountyDictionary_dictPlace, 
            T.dictCounty AS CountyDictionary_dictCounty, 
            True AS _from0
        FROM GeneralModelContainer.CountyDictionaries AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.CountyDictionaries
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView54()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.CountyDictionaries", @"
    SELECT VALUE -- Constructing CountyDictionaries
        [GeneralModel.CountyDictionary](T1.CountyDictionary_dictId, T1.CountyDictionary_dictPlace, T1.CountyDictionary_dictCounty)
    FROM (
        SELECT 
            T.dictId AS CountyDictionary_dictId, 
            T.dictPlace AS CountyDictionary_dictPlace, 
            T.dictCounty AS CountyDictionary_dictCounty, 
            True AS _from0
        FROM GeneralModelStoreContainer.CountyDictionary AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GeneralModelStoreContainer.uvw_ParentMapChildren
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView55()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5530);
            viewString.Append("\r\n    SELECT VALUE -- Constructing uvw_ParentMapChildren\r\n        [GeneralModel.");
            viewString.Append("Store.uvw_ParentMapChildren](T1.[uvw_ParentMapChildren.Person_id], T1.[uvw_Paren");
            viewString.Append("tMapChildren.MotherId], T1.[uvw_ParentMapChildren.FatherId], T1.[uvw_ParentMapCh");
            viewString.Append("ildren.IsMale], T1.[uvw_ParentMapChildren.ChristianName], T1.[uvw_ParentMapChild");
            viewString.Append("ren.Surname], T1.[uvw_ParentMapChildren.BirthLocation], T1.[uvw_ParentMapChildre");
            viewString.Append("n.BirthDateStr], T1.[uvw_ParentMapChildren.BaptismDateStr], T1.[uvw_ParentMapChi");
            viewString.Append("ldren.DeathDateStr], T1.[uvw_ParentMapChildren.DeathLocation], T1.[uvw_ParentMap");
            viewString.Append("Children.FatherChristianName], T1.[uvw_ParentMapChildren.FatherSurname], T1.[uvw");
            viewString.Append("_ParentMapChildren.MotherChristianName], T1.[uvw_ParentMapChildren.MotherSurname");
            viewString.Append("], T1.[uvw_ParentMapChildren.Notes], T1.[uvw_ParentMapChildren.Source], T1.[uvw_");
            viewString.Append("ParentMapChildren.BirthInt], T1.[uvw_ParentMapChildren.BapInt], T1.[uvw_ParentMa");
            viewString.Append("pChildren.DeathInt], T1.[uvw_ParentMapChildren.DeathCounty], T1.[uvw_ParentMapCh");
            viewString.Append("ildren.BirthCounty], T1.[uvw_ParentMapChildren.DateAdded], T1.[uvw_ParentMapChil");
            viewString.Append("dren.DateLastEdit], T1.[uvw_ParentMapChildren.UserId], T1.[uvw_ParentMapChildren");
            viewString.Append(".OrigSurname], T1.[uvw_ParentMapChildren.OrigFatherSurname], T1.[uvw_ParentMapCh");
            viewString.Append("ildren.OrigMotherSurname], T1.[uvw_ParentMapChildren.Occupation], T1.[uvw_Parent");
            viewString.Append("MapChildren.ReferenceLocation], T1.[uvw_ParentMapChildren.ReferenceDateStr], T1.");
            viewString.Append("[uvw_ParentMapChildren.ReferenceDateInt], T1.[uvw_ParentMapChildren.SpouseName],");
            viewString.Append(" T1.[uvw_ParentMapChildren.SpouseSurname], T1.[uvw_ParentMapChildren.FatherOccup");
            viewString.Append("ation], T1.[uvw_ParentMapChildren.BirthLocationId], T1.[uvw_ParentMapChildren.De");
            viewString.Append("athLocationId], T1.[uvw_ParentMapChildren.ReferenceLocationId], T1.[uvw_ParentMa");
            viewString.Append("pChildren.UniqueRef], T1.[uvw_ParentMapChildren.TotalEvents], T1.[uvw_ParentMapC");
            viewString.Append("hildren.EventPriority], T1.[uvw_ParentMapChildren.EstBirthYearInt], T1.[uvw_Pare");
            viewString.Append("ntMapChildren.EstDeathYearInt], T1.[uvw_ParentMapChildren.IsEstBirth], T1.[uvw_P");
            viewString.Append("arentMapChildren.IsEstDeath], T1.[uvw_ParentMapChildren.PersonA], T1.[uvw_Parent");
            viewString.Append("MapChildren.ParentId], T1.[uvw_ParentMapChildren.RelationType])\r\n    FROM (\r\n   ");
            viewString.Append("     SELECT \r\n            T.Person_id AS [uvw_ParentMapChildren.Person_id], \r\n  ");
            viewString.Append("          T.MotherId AS [uvw_ParentMapChildren.MotherId], \r\n            T.Father");
            viewString.Append("Id AS [uvw_ParentMapChildren.FatherId], \r\n            T.IsMale AS [uvw_ParentMap");
            viewString.Append("Children.IsMale], \r\n            T.ChristianName AS [uvw_ParentMapChildren.Christ");
            viewString.Append("ianName], \r\n            T.Surname AS [uvw_ParentMapChildren.Surname], \r\n        ");
            viewString.Append("    T.BirthLocation AS [uvw_ParentMapChildren.BirthLocation], \r\n            T.Bi");
            viewString.Append("rthDateStr AS [uvw_ParentMapChildren.BirthDateStr], \r\n            T.BaptismDateS");
            viewString.Append("tr AS [uvw_ParentMapChildren.BaptismDateStr], \r\n            T.DeathDateStr AS [u");
            viewString.Append("vw_ParentMapChildren.DeathDateStr], \r\n            T.DeathLocation AS [uvw_Parent");
            viewString.Append("MapChildren.DeathLocation], \r\n            T.FatherChristianName AS [uvw_ParentMa");
            viewString.Append("pChildren.FatherChristianName], \r\n            T.FatherSurname AS [uvw_ParentMapC");
            viewString.Append("hildren.FatherSurname], \r\n            T.MotherChristianName AS [uvw_ParentMapChi");
            viewString.Append("ldren.MotherChristianName], \r\n            T.MotherSurname AS [uvw_ParentMapChild");
            viewString.Append("ren.MotherSurname], \r\n            T.Notes AS [uvw_ParentMapChildren.Notes], \r\n  ");
            viewString.Append("          T.Source AS [uvw_ParentMapChildren.Source], \r\n            T.BirthInt A");
            viewString.Append("S [uvw_ParentMapChildren.BirthInt], \r\n            T.BapInt AS [uvw_ParentMapChil");
            viewString.Append("dren.BapInt], \r\n            T.DeathInt AS [uvw_ParentMapChildren.DeathInt], \r\n  ");
            viewString.Append("          T.DeathCounty AS [uvw_ParentMapChildren.DeathCounty], \r\n            T.");
            viewString.Append("BirthCounty AS [uvw_ParentMapChildren.BirthCounty], \r\n            T.DateAdded AS");
            viewString.Append(" [uvw_ParentMapChildren.DateAdded], \r\n            T.DateLastEdit AS [uvw_ParentM");
            viewString.Append("apChildren.DateLastEdit], \r\n            T.UserId AS [uvw_ParentMapChildren.UserI");
            viewString.Append("d], \r\n            T.OrigSurname AS [uvw_ParentMapChildren.OrigSurname], \r\n      ");
            viewString.Append("      T.OrigFatherSurname AS [uvw_ParentMapChildren.OrigFatherSurname], \r\n      ");
            viewString.Append("      T.OrigMotherSurname AS [uvw_ParentMapChildren.OrigMotherSurname], \r\n      ");
            viewString.Append("      T.Occupation AS [uvw_ParentMapChildren.Occupation], \r\n            T.Refere");
            viewString.Append("nceLocation AS [uvw_ParentMapChildren.ReferenceLocation], \r\n            T.Refere");
            viewString.Append("nceDateStr AS [uvw_ParentMapChildren.ReferenceDateStr], \r\n            T.Referenc");
            viewString.Append("eDateInt AS [uvw_ParentMapChildren.ReferenceDateInt], \r\n            T.SpouseName");
            viewString.Append(" AS [uvw_ParentMapChildren.SpouseName], \r\n            T.SpouseSurname AS [uvw_Pa");
            viewString.Append("rentMapChildren.SpouseSurname], \r\n            T.FatherOccupation AS [uvw_ParentM");
            viewString.Append("apChildren.FatherOccupation], \r\n            T.BirthLocationId AS [uvw_ParentMapC");
            viewString.Append("hildren.BirthLocationId], \r\n            T.DeathLocationId AS [uvw_ParentMapChild");
            viewString.Append("ren.DeathLocationId], \r\n            T.ReferenceLocationId AS [uvw_ParentMapChild");
            viewString.Append("ren.ReferenceLocationId], \r\n            T.UniqueRef AS [uvw_ParentMapChildren.Un");
            viewString.Append("iqueRef], \r\n            T.TotalEvents AS [uvw_ParentMapChildren.TotalEvents], \r\n");
            viewString.Append("            T.EventPriority AS [uvw_ParentMapChildren.EventPriority], \r\n        ");
            viewString.Append("    T.EstBirthYearInt AS [uvw_ParentMapChildren.EstBirthYearInt], \r\n            ");
            viewString.Append("T.EstDeathYearInt AS [uvw_ParentMapChildren.EstDeathYearInt], \r\n            T.Is");
            viewString.Append("EstBirth AS [uvw_ParentMapChildren.IsEstBirth], \r\n            T.IsEstDeath AS [u");
            viewString.Append("vw_ParentMapChildren.IsEstDeath], \r\n            T.PersonA AS [uvw_ParentMapChild");
            viewString.Append("ren.PersonA], \r\n            T.ParentId AS [uvw_ParentMapChildren.ParentId], \r\n  ");
            viewString.Append("          T.RelationType AS [uvw_ParentMapChildren.RelationType], \r\n            ");
            viewString.Append("True AS _from0\r\n        FROM GeneralModelContainer.uvw_ParentMapChildren AS T\r\n ");
            viewString.Append("   ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelStoreContainer.uvw_ParentMapChildren", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for GeneralModelContainer.uvw_ParentMapChildren
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView56()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5529);
            viewString.Append("\r\n    SELECT VALUE -- Constructing uvw_ParentMapChildren\r\n        [GeneralModel.");
            viewString.Append("uvw_ParentMapChildren](T1.[uvw_ParentMapChildren.Person_id], T1.[uvw_ParentMapCh");
            viewString.Append("ildren.MotherId], T1.[uvw_ParentMapChildren.FatherId], T1.[uvw_ParentMapChildren");
            viewString.Append(".IsMale], T1.[uvw_ParentMapChildren.ChristianName], T1.[uvw_ParentMapChildren.Su");
            viewString.Append("rname], T1.[uvw_ParentMapChildren.BirthLocation], T1.[uvw_ParentMapChildren.Birt");
            viewString.Append("hDateStr], T1.[uvw_ParentMapChildren.BaptismDateStr], T1.[uvw_ParentMapChildren.");
            viewString.Append("DeathDateStr], T1.[uvw_ParentMapChildren.DeathLocation], T1.[uvw_ParentMapChildr");
            viewString.Append("en.FatherChristianName], T1.[uvw_ParentMapChildren.FatherSurname], T1.[uvw_Paren");
            viewString.Append("tMapChildren.MotherChristianName], T1.[uvw_ParentMapChildren.MotherSurname], T1.");
            viewString.Append("[uvw_ParentMapChildren.Notes], T1.[uvw_ParentMapChildren.Source], T1.[uvw_Parent");
            viewString.Append("MapChildren.BirthInt], T1.[uvw_ParentMapChildren.BapInt], T1.[uvw_ParentMapChild");
            viewString.Append("ren.DeathInt], T1.[uvw_ParentMapChildren.DeathCounty], T1.[uvw_ParentMapChildren");
            viewString.Append(".BirthCounty], T1.[uvw_ParentMapChildren.DateAdded], T1.[uvw_ParentMapChildren.D");
            viewString.Append("ateLastEdit], T1.[uvw_ParentMapChildren.UserId], T1.[uvw_ParentMapChildren.OrigS");
            viewString.Append("urname], T1.[uvw_ParentMapChildren.OrigFatherSurname], T1.[uvw_ParentMapChildren");
            viewString.Append(".OrigMotherSurname], T1.[uvw_ParentMapChildren.Occupation], T1.[uvw_ParentMapChi");
            viewString.Append("ldren.ReferenceLocation], T1.[uvw_ParentMapChildren.ReferenceDateStr], T1.[uvw_P");
            viewString.Append("arentMapChildren.ReferenceDateInt], T1.[uvw_ParentMapChildren.SpouseName], T1.[u");
            viewString.Append("vw_ParentMapChildren.SpouseSurname], T1.[uvw_ParentMapChildren.FatherOccupation]");
            viewString.Append(", T1.[uvw_ParentMapChildren.BirthLocationId], T1.[uvw_ParentMapChildren.DeathLoc");
            viewString.Append("ationId], T1.[uvw_ParentMapChildren.ReferenceLocationId], T1.[uvw_ParentMapChild");
            viewString.Append("ren.UniqueRef], T1.[uvw_ParentMapChildren.TotalEvents], T1.[uvw_ParentMapChildre");
            viewString.Append("n.EventPriority], T1.[uvw_ParentMapChildren.EstBirthYearInt], T1.[uvw_ParentMapC");
            viewString.Append("hildren.EstDeathYearInt], T1.[uvw_ParentMapChildren.IsEstBirth], T1.[uvw_ParentM");
            viewString.Append("apChildren.IsEstDeath], T1.[uvw_ParentMapChildren.PersonA], T1.[uvw_ParentMapChi");
            viewString.Append("ldren.ParentId], T1.[uvw_ParentMapChildren.RelationType])\r\n    FROM (\r\n        S");
            viewString.Append("ELECT \r\n            T.Person_id AS [uvw_ParentMapChildren.Person_id], \r\n        ");
            viewString.Append("    T.MotherId AS [uvw_ParentMapChildren.MotherId], \r\n            T.FatherId AS ");
            viewString.Append("[uvw_ParentMapChildren.FatherId], \r\n            T.IsMale AS [uvw_ParentMapChildr");
            viewString.Append("en.IsMale], \r\n            T.ChristianName AS [uvw_ParentMapChildren.ChristianNam");
            viewString.Append("e], \r\n            T.Surname AS [uvw_ParentMapChildren.Surname], \r\n            T.");
            viewString.Append("BirthLocation AS [uvw_ParentMapChildren.BirthLocation], \r\n            T.BirthDat");
            viewString.Append("eStr AS [uvw_ParentMapChildren.BirthDateStr], \r\n            T.BaptismDateStr AS ");
            viewString.Append("[uvw_ParentMapChildren.BaptismDateStr], \r\n            T.DeathDateStr AS [uvw_Par");
            viewString.Append("entMapChildren.DeathDateStr], \r\n            T.DeathLocation AS [uvw_ParentMapChi");
            viewString.Append("ldren.DeathLocation], \r\n            T.FatherChristianName AS [uvw_ParentMapChild");
            viewString.Append("ren.FatherChristianName], \r\n            T.FatherSurname AS [uvw_ParentMapChildre");
            viewString.Append("n.FatherSurname], \r\n            T.MotherChristianName AS [uvw_ParentMapChildren.");
            viewString.Append("MotherChristianName], \r\n            T.MotherSurname AS [uvw_ParentMapChildren.Mo");
            viewString.Append("therSurname], \r\n            T.Notes AS [uvw_ParentMapChildren.Notes], \r\n        ");
            viewString.Append("    T.Source AS [uvw_ParentMapChildren.Source], \r\n            T.BirthInt AS [uvw");
            viewString.Append("_ParentMapChildren.BirthInt], \r\n            T.BapInt AS [uvw_ParentMapChildren.B");
            viewString.Append("apInt], \r\n            T.DeathInt AS [uvw_ParentMapChildren.DeathInt], \r\n        ");
            viewString.Append("    T.DeathCounty AS [uvw_ParentMapChildren.DeathCounty], \r\n            T.BirthC");
            viewString.Append("ounty AS [uvw_ParentMapChildren.BirthCounty], \r\n            T.DateAdded AS [uvw_");
            viewString.Append("ParentMapChildren.DateAdded], \r\n            T.DateLastEdit AS [uvw_ParentMapChil");
            viewString.Append("dren.DateLastEdit], \r\n            T.UserId AS [uvw_ParentMapChildren.UserId], \r\n");
            viewString.Append("            T.OrigSurname AS [uvw_ParentMapChildren.OrigSurname], \r\n            ");
            viewString.Append("T.OrigFatherSurname AS [uvw_ParentMapChildren.OrigFatherSurname], \r\n            ");
            viewString.Append("T.OrigMotherSurname AS [uvw_ParentMapChildren.OrigMotherSurname], \r\n            ");
            viewString.Append("T.Occupation AS [uvw_ParentMapChildren.Occupation], \r\n            T.ReferenceLoc");
            viewString.Append("ation AS [uvw_ParentMapChildren.ReferenceLocation], \r\n            T.ReferenceDat");
            viewString.Append("eStr AS [uvw_ParentMapChildren.ReferenceDateStr], \r\n            T.ReferenceDateI");
            viewString.Append("nt AS [uvw_ParentMapChildren.ReferenceDateInt], \r\n            T.SpouseName AS [u");
            viewString.Append("vw_ParentMapChildren.SpouseName], \r\n            T.SpouseSurname AS [uvw_ParentMa");
            viewString.Append("pChildren.SpouseSurname], \r\n            T.FatherOccupation AS [uvw_ParentMapChil");
            viewString.Append("dren.FatherOccupation], \r\n            T.BirthLocationId AS [uvw_ParentMapChildre");
            viewString.Append("n.BirthLocationId], \r\n            T.DeathLocationId AS [uvw_ParentMapChildren.De");
            viewString.Append("athLocationId], \r\n            T.ReferenceLocationId AS [uvw_ParentMapChildren.Re");
            viewString.Append("ferenceLocationId], \r\n            T.UniqueRef AS [uvw_ParentMapChildren.UniqueRe");
            viewString.Append("f], \r\n            T.TotalEvents AS [uvw_ParentMapChildren.TotalEvents], \r\n      ");
            viewString.Append("      T.EventPriority AS [uvw_ParentMapChildren.EventPriority], \r\n            T.");
            viewString.Append("EstBirthYearInt AS [uvw_ParentMapChildren.EstBirthYearInt], \r\n            T.EstD");
            viewString.Append("eathYearInt AS [uvw_ParentMapChildren.EstDeathYearInt], \r\n            T.IsEstBir");
            viewString.Append("th AS [uvw_ParentMapChildren.IsEstBirth], \r\n            T.IsEstDeath AS [uvw_Par");
            viewString.Append("entMapChildren.IsEstDeath], \r\n            T.PersonA AS [uvw_ParentMapChildren.Pe");
            viewString.Append("rsonA], \r\n            T.ParentId AS [uvw_ParentMapChildren.ParentId], \r\n        ");
            viewString.Append("    T.RelationType AS [uvw_ParentMapChildren.RelationType], \r\n            True A");
            viewString.Append("S _from0\r\n        FROM GeneralModelStoreContainer.uvw_ParentMapChildren AS T\r\n  ");
            viewString.Append("  ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("GeneralModelContainer.uvw_ParentMapChildren", viewString.ToString());
        }
    }
}
